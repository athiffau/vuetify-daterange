{"version":3,"sources":["../../src/util/colorUtils.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,WAA5B;AAMA,OAAM,SAAU,UAAV,CAAsB,KAAtB,EAAiD;AACrD,QAAI,YAAJ;AAEA,QAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,KAAN;AACD,KAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AACpC,YAAI,IAAI,MAAM,CAAN,MAAa,GAAb,GAAmB,MAAM,SAAN,CAAgB,CAAhB,CAAnB,GAAwC,KAAhD;AACA,YAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAClB,gBAAI,EAAE,KAAF,CAAQ,EAAR,EAAY,GAAZ,CAAgB;AAAA,uBAAQ,OAAO,IAAf;AAAA,aAAhB,EAAqC,IAArC,CAA0C,EAA1C,CAAJ;AACD;AACD,YAAI,EAAE,MAAF,KAAa,CAAjB,EAAoB;AAClB,+BAAgB,KAAhB;AACD;AACD,cAAM,SAAS,CAAT,EAAY,EAAZ,CAAN;AACD,KATM,MASA;AACL,cAAM,IAAI,SAAJ,uDAAiE,SAAS,IAAT,GAAgB,KAAhB,GAAwB,MAAM,WAAN,CAAkB,IAA3G,eAAN;AACD;AAED,QAAI,MAAM,CAAV,EAAa;AACX,sDAA2C,KAA3C;AACA,cAAM,CAAN;AACD,KAHD,MAGO,IAAI,MAAM,QAAN,IAAkB,MAAM,GAAN,CAAtB,EAAkC;AACvC,2BAAgB,KAAhB;AACA,cAAM,QAAN;AACD;AAED,WAAO,GAAP;AACD;AAED,OAAM,SAAU,QAAV,CAAoB,KAApB,EAA8B;AAClC,QAAI,WAAmB,MAAM,QAAN,CAAe,EAAf,CAAvB;AAEA,QAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB,WAAW,IAAI,MAAJ,CAAW,IAAI,SAAS,MAAxB,IAAkC,QAA7C;AAEzB,WAAO,MAAM,QAAb;AACD;AAED,OAAM,SAAU,UAAV,CAAsB,KAAtB,EAAiD;AACrD,WAAO,SAAS,WAAW,KAAX,CAAT,CAAP;AACD","sourcesContent":["import { consoleWarn } from './console'\r\n\r\nexport type RGB = number\r\nexport type XYZ = [number, number, number]\r\nexport type LAB = [number, number, number]\r\n\r\nexport function colorToInt (color: string | number | {}): RGB {\r\n  let rgb\r\n\r\n  if (typeof color === 'number') {\r\n    rgb = color\r\n  } else if (typeof color === 'string') {\r\n    let c = color[0] === '#' ? color.substring(1) : color\r\n    if (c.length === 3) {\r\n      c = c.split('').map(char => char + char).join('')\r\n    }\r\n    if (c.length !== 6) {\r\n      consoleWarn(`'${color}' is not a valid rgb color`)\r\n    }\r\n    rgb = parseInt(c, 16)\r\n  } else {\r\n    throw new TypeError(`Colors can only be numbers or strings, recieved ${color == null ? color : color.constructor.name} instead`)\r\n  }\r\n\r\n  if (rgb < 0) {\r\n    consoleWarn(`Colors cannot be negative: '${color}'`)\r\n    rgb = 0\r\n  } else if (rgb > 0xffffff || isNaN(rgb)) {\r\n    consoleWarn(`'${color}' is not a valid rgb color`)\r\n    rgb = 0xffffff\r\n  }\r\n\r\n  return rgb\r\n}\r\n\r\nexport function intToHex (color: RGB): string {\r\n  let hexColor: string = color.toString(16)\r\n\r\n  if (hexColor.length < 6) hexColor = '0'.repeat(6 - hexColor.length) + hexColor\r\n\r\n  return '#' + hexColor\r\n}\r\n\r\nexport function colorToHex (color: string | number | {}): string {\r\n  return intToHex(colorToInt(color))\r\n}\r\n"],"sourceRoot":""}