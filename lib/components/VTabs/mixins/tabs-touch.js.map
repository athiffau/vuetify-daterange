{"version":3,"sources":["../../../../src/components/VTabs/mixins/tabs-touch.js"],"names":[],"mappings":";;;;;AAKA;AACA,eAAe;AACb,aAAS;AACP,iBADO,qBACI,SADJ,EACa;AAClB,gBAAM,cAAc,KAAK,KAAL,CAAW,OAAX,CAAmB,WAAvC;AAEA,gBAAI,cAAc,MAAlB,EAA0B;AACxB,uBAAO,KAAK,GAAL,CAAS,KAAK,YAAL,GAAoB,WAA7B,EAA0C,CAA1C,CAAP;AACD,aAFD,MAEO;AACL,uBAAO,KAAK,GAAL,CAAS,KAAK,YAAL,GAAoB,WAA7B,EAA0C,KAAK,KAAL,CAAW,SAAX,CAAqB,WAArB,GAAmC,WAA7E,CAAP;AACD;AACF,SATM;AAUP,oBAVO,wBAUO,CAVP,EAUQ;AACb,iBAAK,MAAL,GAAc,KAAK,YAAL,GAAoB,EAAE,WAApC;AACA,iBAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,CAA2B,UAA3B,GAAwC,MAAxC;AACA,iBAAK,KAAL,CAAW,SAAX,CAAqB,KAArB,CAA2B,UAA3B,GAAwC,WAAxC;AACD,SAdM;AAeP,mBAfO,uBAeM,CAfN,EAeO;AACZ,iBAAK,YAAL,GAAoB,KAAK,MAAL,GAAc,EAAE,UAApC;AACD,SAjBM;AAkBP,kBAlBO,wBAkBG;AACR,gBAAM,YAAY,KAAK,KAAL,CAAW,SAA7B;AACA,gBAAM,UAAU,KAAK,KAAL,CAAW,OAA3B;AACA,gBAAM,kBAAkB,UAAU,WAAV,GAAwB,QAAQ,WAAxD;AACA,sBAAU,KAAV,CAAgB,UAAhB,GAA6B,IAA7B;AACA,sBAAU,KAAV,CAAgB,UAAhB,GAA6B,IAA7B;AAEA;AACA,gBAAI,KAAK,YAAL,GAAoB,CAApB,IAAyB,CAAC,KAAK,aAAnC,EAAkD;AAChD,qBAAK,YAAL,GAAoB,CAApB;AACD,aAFD,MAEO,IAAI,KAAK,YAAL,IAAqB,eAAzB,EAA0C;AAC/C,qBAAK,YAAL,GAAoB,eAApB;AACD;AACF;AA/BM;AADI,CAAf","sourcesContent":["/**\r\n * Tabs touch\r\n *\r\n * @mixin\r\n */\r\n/* @vue/component */\r\nexport default {\r\n  methods: {\r\n    newOffset (direction) {\r\n      const clientWidth = this.$refs.wrapper.clientWidth\r\n\r\n      if (direction === 'prev') {\r\n        return Math.max(this.scrollOffset - clientWidth, 0)\r\n      } else {\r\n        return Math.min(this.scrollOffset + clientWidth, this.$refs.container.clientWidth - clientWidth)\r\n      }\r\n    },\r\n    onTouchStart (e) {\r\n      this.startX = this.scrollOffset + e.touchstartX\r\n      this.$refs.container.style.transition = 'none'\r\n      this.$refs.container.style.willChange = 'transform'\r\n    },\r\n    onTouchMove (e) {\r\n      this.scrollOffset = this.startX - e.touchmoveX\r\n    },\r\n    onTouchEnd () {\r\n      const container = this.$refs.container\r\n      const wrapper = this.$refs.wrapper\r\n      const maxScrollOffset = container.clientWidth - wrapper.clientWidth\r\n      container.style.transition = null\r\n      container.style.willChange = null\r\n\r\n      /* istanbul ignore else */\r\n      if (this.scrollOffset < 0 || !this.isOverflowing) {\r\n        this.scrollOffset = 0\r\n      } else if (this.scrollOffset >= maxScrollOffset) {\r\n        this.scrollOffset = maxScrollOffset\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}