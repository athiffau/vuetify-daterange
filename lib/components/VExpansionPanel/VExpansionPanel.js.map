{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"names":[],"mappings":"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","sourcesContent":["import '../../stylus/components/_expansion-panel.styl'\r\n\r\nimport { VExpansionPanelContent } from '.'\r\n\r\nimport Themeable from '../../mixins/themeable'\r\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\r\n\r\nimport mixins from '../../util/mixins'\r\nimport { VNode } from 'vue'\r\nimport { PropValidator } from 'vue/types/options'\r\n\r\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\r\n\r\n/* @vue/component */\r\nexport default mixins(Themeable, RegistrableProvide('expansionPanel')).extend({\r\n  name: 'v-expansion-panel',\r\n\r\n  provide (): object {\r\n    return {\r\n      expansionPanel: this\r\n    }\r\n  },\r\n\r\n  props: {\r\n    disabled: Boolean,\r\n    readonly: Boolean,\r\n    expand: Boolean,\r\n    focusable: Boolean,\r\n    inset: Boolean,\r\n    popout: Boolean,\r\n    value: {\r\n      type: [Number, Array],\r\n      default: () => null\r\n    } as any as PropValidator<number | number[]>\r\n  },\r\n\r\n  data: () => ({\r\n    items: [] as VExpansionPanelContentInstance[],\r\n    open: [] as boolean[]\r\n  }),\r\n\r\n  computed: {\r\n    classes (): object {\r\n      return {\r\n        'v-expansion-panel--focusable': this.focusable,\r\n        'v-expansion-panel--popout': this.popout,\r\n        'v-expansion-panel--inset': this.inset,\r\n        ...this.themeClasses\r\n      }\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    expand (v: boolean) {\r\n      let openIndex = -1\r\n      if (!v) {\r\n        // Close all panels unless only one is open\r\n        const openCount = this.open.reduce((acc, val) => val ? acc + 1 : acc, 0)\r\n        const open = Array(this.items.length).fill(false)\r\n\r\n        if (openCount === 1) {\r\n          openIndex = this.open.indexOf(true)\r\n        }\r\n\r\n        if (openIndex > -1) {\r\n          open[openIndex] = true\r\n        }\r\n\r\n        this.open = open\r\n      }\r\n\r\n      this.$emit('input', v ? this.open : (openIndex > -1 ? openIndex : null))\r\n    },\r\n    value (v: number | number[]) {\r\n      this.updateFromValue(v)\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.value !== null && this.updateFromValue(this.value)\r\n  },\r\n\r\n  methods: {\r\n    updateFromValue (v: number | number[]) {\r\n      if (Array.isArray(v) && !this.expand) return\r\n\r\n      let open = Array(this.items.length).fill(false)\r\n      if (typeof v === 'number') {\r\n        open[v] = true\r\n      } else if (v !== null) {\r\n        open = v\r\n      }\r\n\r\n      this.updatePanels(open)\r\n    },\r\n    updatePanels (open: boolean[]) {\r\n      this.open = open\r\n      for (let i = 0; i < this.items.length; i++) {\r\n        this.items[i].toggle(open && open[i])\r\n      }\r\n    },\r\n    panelClick (uid: number) {\r\n      const open = this.expand ? this.open.slice() : Array(this.items.length).fill(false)\r\n      for (let i = 0; i < this.items.length; i++) {\r\n        if (this.items[i]._uid === uid) {\r\n          open[i] = !this.open[i]\r\n          !this.expand && this.$emit('input', open[i] ? i : null)\r\n        }\r\n      }\r\n\r\n      this.updatePanels(open)\r\n      if (this.expand) this.$emit('input', open)\r\n    },\r\n    register (content: VExpansionPanelContentInstance) {\r\n      const i = this.items.push(content) - 1\r\n      this.value !== null && this.updateFromValue(this.value)\r\n      content.toggle(!!this.open[i])\r\n    },\r\n    unregister (content: VExpansionPanelContentInstance) {\r\n      const index = this.items.findIndex(i => i._uid === content._uid)\r\n      this.items.splice(index, 1)\r\n      this.open.splice(index, 1)\r\n    }\r\n  },\r\n\r\n  render (h): VNode {\r\n    return h('ul', {\r\n      staticClass: 'v-expansion-panel',\r\n      class: this.classes\r\n    }, this.$slots.default)\r\n  }\r\n})\r\n"],"sourceRoot":""}