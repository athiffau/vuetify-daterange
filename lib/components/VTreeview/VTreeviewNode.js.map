{"version":3,"sources":["../../../src/components/VTreeview/VTreeviewNode.ts"],"names":[],"mappings":"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","sourcesContent":["// Components\r\nimport { VExpandTransition } from '../transitions'\r\nimport { VIcon } from '../VIcon'\r\nimport VTreeview from './VTreeview'\r\nimport VTreeviewNode from './VTreeviewNode'\r\n\r\n// Mixins\r\nimport { inject as RegistrableInject } from '../../mixins/registrable'\r\n\r\n// Utils\r\nimport mixins from '../../util/mixins'\r\nimport { getObjectValueByPath } from '../../util/helpers'\r\nimport { PropValidator } from 'vue/types/options'\r\n\r\n// Types\r\nimport Vue, { VNode } from 'vue'\r\n\r\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\r\n\r\ninterface options extends Vue {\r\n  treeview: VTreeViewInstance\r\n}\r\n\r\nexport const VTreeviewNodeProps = {\r\n  activatable: Boolean,\r\n  activeClass: {\r\n    type: String,\r\n    default: 'v-treeview-node--active'\r\n  },\r\n  selectable: Boolean,\r\n  selectedColor: {\r\n    type: String,\r\n    default: 'accent'\r\n  },\r\n  indeterminateIcon: {\r\n    type: String,\r\n    default: '$vuetify.icons.checkboxIndeterminate'\r\n  },\r\n  onIcon: {\r\n    type: String,\r\n    default: '$vuetify.icons.checkboxOn'\r\n  },\r\n  offIcon: {\r\n    type: String,\r\n    default: '$vuetify.icons.checkboxOff'\r\n  },\r\n  expandIcon: {\r\n    type: String,\r\n    default: '$vuetify.icons.subgroup'\r\n  },\r\n  loadingIcon: {\r\n    type: String,\r\n    default: '$vuetify.icons.loading'\r\n  },\r\n  itemKey: {\r\n    type: String,\r\n    default: 'id'\r\n  },\r\n  itemText: {\r\n    type: String,\r\n    default: 'name'\r\n  },\r\n  itemChildren: {\r\n    type: String,\r\n    default: 'children'\r\n  },\r\n  loadChildren: Function as PropValidator<(item: any) => Promise<void>>,\r\n  openOnClick: Boolean,\r\n  transition: Boolean\r\n}\r\n\r\nexport default mixins<options>(\r\n  RegistrableInject('treeview')\r\n  /* @vue/component */\r\n).extend({\r\n  name: 'v-treeview-node',\r\n\r\n  inject: {\r\n    treeview: {\r\n      default: null\r\n    }\r\n  },\r\n\r\n  props: {\r\n    item: {\r\n      type: Object,\r\n      default: () => null\r\n    },\r\n    ...VTreeviewNodeProps\r\n  },\r\n\r\n  data: () => ({\r\n    isOpen: false, // Node is open/expanded\r\n    isSelected: false, // Node is selected (checkbox)\r\n    isIndeterminate: false, // Node has at least one selected child\r\n    isActive: false, // Node is selected (row)\r\n    isLoading: false,\r\n    hasLoaded: false\r\n  }),\r\n\r\n  computed: {\r\n    key (): string {\r\n      return getObjectValueByPath(this.item, this.itemKey)\r\n    },\r\n    children (): any[] | null {\r\n      return getObjectValueByPath(this.item, this.itemChildren)\r\n    },\r\n    text (): string {\r\n      return getObjectValueByPath(this.item, this.itemText)\r\n    },\r\n    scopedProps (): object {\r\n      return {\r\n        item: this.item,\r\n        leaf: !this.children,\r\n        selected: this.isSelected,\r\n        indeterminate: this.isIndeterminate,\r\n        active: this.isActive,\r\n        open: this.isOpen\r\n      }\r\n    },\r\n    computedIcon (): string {\r\n      if (this.isIndeterminate) return this.indeterminateIcon\r\n      else if (this.isSelected) return this.onIcon\r\n      else return this.offIcon\r\n    },\r\n    hasChildren (): boolean {\r\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\r\n    }\r\n  },\r\n\r\n  created () {\r\n    this.treeview.register(this)\r\n  },\r\n\r\n  beforeDestroy () {\r\n    this.treeview.unregister(this)\r\n  },\r\n\r\n  methods: {\r\n    checkChildren (): Promise<void> {\r\n      return new Promise<void>(resolve => {\r\n        // TODO: Potential issue with always trying\r\n        // to load children if response is empty?\r\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\r\n\r\n        this.isLoading = true\r\n        resolve(this.loadChildren(this.item))\r\n      }).then(() => {\r\n        this.isLoading = false\r\n        this.hasLoaded = true\r\n      })\r\n    },\r\n    open () {\r\n      this.isOpen = !this.isOpen\r\n      this.treeview.updateOpen(this.key, this.isOpen)\r\n      this.treeview.emitOpen()\r\n    },\r\n    genLabel () {\r\n      const children = []\r\n\r\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\r\n      else children.push(this.text)\r\n\r\n      return this.$createElement('div', {\r\n        slot: 'label',\r\n        staticClass: 'v-treeview-node__label'\r\n      }, children)\r\n    },\r\n    genContent () {\r\n      const children = [\r\n        this.$scopedSlots.prepend && this.$scopedSlots.prepend(this.scopedProps),\r\n        this.genLabel(),\r\n        this.$scopedSlots.append && this.$scopedSlots.append(this.scopedProps)\r\n      ]\r\n\r\n      return this.$createElement('div', {\r\n        staticClass: 'v-treeview-node__content'\r\n      }, children)\r\n    },\r\n    genToggle () {\r\n      return this.$createElement(VIcon, {\r\n        staticClass: 'v-treeview-node__toggle',\r\n        class: {\r\n          'v-treeview-node__toggle--open': this.isOpen,\r\n          'v-treeview-node__toggle--loading': this.isLoading\r\n        },\r\n        slot: 'prepend',\r\n        on: {\r\n          click: (e: MouseEvent) => {\r\n            e.stopPropagation()\r\n\r\n            if (this.isLoading) return\r\n\r\n            this.checkChildren().then(() => this.open())\r\n          }\r\n        }\r\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\r\n    },\r\n    genCheckbox () {\r\n      return this.$createElement(VIcon, {\r\n        staticClass: 'v-treeview-node__checkbox',\r\n        props: {\r\n          color: this.isSelected ? this.selectedColor : undefined\r\n        },\r\n        on: {\r\n          click: (e: MouseEvent) => {\r\n            e.stopPropagation()\r\n\r\n            if (this.isLoading) return\r\n\r\n            this.checkChildren().then(() => {\r\n              // We nextTick here so that items watch in VTreeview has a chance to run first\r\n              this.$nextTick(() => {\r\n                this.isSelected = !this.isSelected\r\n                this.isIndeterminate = false\r\n\r\n                this.treeview.updateSelected(this.key, this.isSelected)\r\n                this.treeview.emitSelected()\r\n              })\r\n            })\r\n          }\r\n        }\r\n      }, [this.computedIcon])\r\n    },\r\n    genNode (): VNode {\r\n      const children = [this.genContent()]\r\n\r\n      if (this.selectable) children.unshift(this.genCheckbox())\r\n      if (this.hasChildren) children.unshift(this.genToggle())\r\n\r\n      return this.$createElement('div', {\r\n        staticClass: 'v-treeview-node__root',\r\n        class: {\r\n          [this.activeClass]: this.isActive\r\n        },\r\n        on: {\r\n          click: () => {\r\n            if (this.openOnClick && this.children) {\r\n              this.open()\r\n            } else if (this.activatable) {\r\n              this.isActive = !this.isActive\r\n              this.treeview.updateActive(this.key, this.isActive)\r\n              this.treeview.emitActive()\r\n            }\r\n          }\r\n        }\r\n      }, children)\r\n    },\r\n    genChild (item: any): VNode {\r\n      return this.$createElement(VTreeviewNode, {\r\n        key: getObjectValueByPath(item, this.itemKey),\r\n        props: {\r\n          activatable: this.activatable,\r\n          activeClass: this.activeClass,\r\n          item,\r\n          selectable: this.selectable,\r\n          selectedColor: this.selectedColor,\r\n          expandIcon: this.expandIcon,\r\n          indeterminateIcon: this.indeterminateIcon,\r\n          offIcon: this.offIcon,\r\n          onIcon: this.onIcon,\r\n          loadingIcon: this.loadingIcon,\r\n          itemKey: this.itemKey,\r\n          itemText: this.itemText,\r\n          itemChildren: this.itemChildren,\r\n          loadChildren: this.loadChildren,\r\n          transition: this.transition,\r\n          openOnClick: this.openOnClick\r\n        },\r\n        scopedSlots: this.$scopedSlots\r\n      })\r\n    },\r\n    genChildrenWrapper (): any {\r\n      if (!this.isOpen || !this.children) return null\r\n\r\n      const children = [this.children.map(this.genChild)]\r\n\r\n      return this.$createElement('div', {\r\n        staticClass: 'v-treeview-node__children'\r\n      }, children)\r\n    },\r\n    genTransition () {\r\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\r\n    }\r\n  },\r\n\r\n  render (h): VNode {\r\n    const children = [this.genNode()]\r\n\r\n    if (this.transition) children.push(this.genTransition())\r\n    else children.push(this.genChildrenWrapper())\r\n\r\n    return h('div', {\r\n      staticClass: 'v-treeview-node',\r\n      class: {\r\n        'v-treeview-node--leaf': !this.hasChildren,\r\n        'v-treeview-node--click': this.openOnClick,\r\n        'v-treeview-node--selected': this.isSelected,\r\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key)\r\n      }\r\n    }, children)\r\n  }\r\n})\r\n"],"sourceRoot":""}