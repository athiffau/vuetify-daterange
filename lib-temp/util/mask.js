export const defaultDelimiters = /[-!$%^&*()_+|~=`{}[\]:";'<>?,./\\ ]/;
export const isMaskDelimiter = (char) => char ? defaultDelimiters.test(char) : false;
const allowedMasks = {
    '#': {
        test: char => /[0-9]/.test(char)
    },
    'A': {
        test: char => /[A-Z]/i.test(char),
        convert: char => char.toUpperCase()
    },
    'a': {
        test: char => /[a-z]/i.test(char),
        convert: char => char.toLowerCase()
    },
    'N': {
        test: char => /[0-9A-Z]/i.test(char),
        convert: char => char.toUpperCase()
    },
    'n': {
        test: char => /[0-9a-z]/i.test(char),
        convert: char => char.toLowerCase()
    },
    'X': {
        test: isMaskDelimiter
    }
};
const isMask = (char) => allowedMasks.hasOwnProperty(char);
const convert = (mask, char) => {
    return allowedMasks[mask].convert ? allowedMasks[mask].convert(char) : char;
};
const maskValidates = (mask, char) => {
    if (char == null || !isMask(mask))
        return false;
    return allowedMasks[mask].test(char);
};
export const maskText = (text, masked, dontFillMaskBlanks) => {
    if (text == null)
        return '';
    text = String(text);
    if (!masked.length || !text.length)
        return text;
    if (!Array.isArray(masked))
        masked = masked.split('');
    let textIndex = 0;
    let maskIndex = 0;
    let newText = '';
    while (maskIndex < masked.length) {
        const mask = masked[maskIndex];
        // Assign the next character
        const char = text[textIndex];
        // Check if mask is delimiter
        // and current char matches
        if (!isMask(mask) && char === mask) {
            newText += mask;
            textIndex++;
            // Check if not mask
        }
        else if (!isMask(mask) && !dontFillMaskBlanks) {
            newText += mask;
            // Check if is mask and validates
        }
        else if (maskValidates(mask, char)) {
            newText += convert(mask, char);
            textIndex++;
        }
        else {
            return newText;
        }
        maskIndex++;
    }
    return newText;
};
export const unmaskText = (text) => {
    return text ? String(text).replace(new RegExp(defaultDelimiters, 'g'), '') : text;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL21hc2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcscUNBQXFDLENBQUE7QUFFdEUsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBWSxFQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBRXJHLE1BQU0sWUFBWSxHQUF5QjtJQUN6QyxHQUFHLEVBQUU7UUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztLQUNqQztJQUNELEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7S0FDcEM7SUFDRCxHQUFHLEVBQUU7UUFDSCxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO0tBQ3BDO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDcEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtLQUNwQztJQUNELEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FB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Q0FBQyxDQUFDLElBQUksQ0FBQTtBQUNuRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIE1hc2tJdGVtIHtcclxuICB0ZXN0OiAoY2hhcjogc3RyaW5nKSA9PiBib29sZWFuXHJcbiAgY29udmVydD86IChjaGFyOiBzdHJpbmcpID0+IHN0cmluZ1xyXG59XHJcbmV4cG9ydCB0eXBlIE1hc2tUeXBlID0gJyMnIHwgJ0EnIHwgJ2EnIHwgJ04nIHwgJ24nIHwgJ1gnXHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdERlbGltaXRlcnMgPSAvWy0hJCVeJiooKV8rfH49YHt9W1xcXTpcIjsnPD4/LC4vXFxcXCBdL1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzTWFza0RlbGltaXRlciA9IChjaGFyOiBzdHJpbmcpOiBib29sZWFuID0+IGNoYXIgPyBkZWZhdWx0RGVsaW1pdGVycy50ZXN0KGNoYXIpIDogZmFsc2VcclxuXHJcbmNvbnN0IGFsbG93ZWRNYXNrczogRGljdGlvbmFyeTxNYXNrSXRlbT4gPSB7XHJcbiAgJyMnOiB7XHJcbiAgICB0ZXN0OiBjaGFyID0+IC9bMC05XS8udGVzdChjaGFyKVxyXG4gIH0sXHJcbiAgJ0EnOiB7XHJcbiAgICB0ZXN0OiBjaGFyID0+IC9bQS1aXS9pLnRlc3QoY2hhciksXHJcbiAgICBjb252ZXJ0OiBjaGFyID0+IGNoYXIudG9VcHBlckNhc2UoKVxyXG4gIH0sXHJcbiAgJ2EnOiB7XHJcbiAgICB0ZXN0OiBjaGFyID0+IC9bYS16XS9pLnRlc3QoY2hhciksXHJcbiAgICBjb252ZXJ0OiBjaGFyID0+IGNoYXIudG9Mb3dlckNhc2UoKVxyXG4gIH0sXHJcbiAgJ04nOiB7XHJcbiAgICB0ZXN0OiBjaGFyID0+IC9bMC05QS1aXS9pLnRlc3QoY2hhciksXHJcbiAgICBjb252ZXJ0OiBjaGFyID0+IGNoYXIudG9VcHBlckNhc2UoKVxyXG4gIH0sXHJcbiAgJ24nOiB7XHJcbiAgICB0ZXN0OiBjaGFyID0+IC9bMC05YS16XS9pLnRlc3QoY2hhciksXHJcbiAgICBjb252ZXJ0OiBjaGFyID0+IGNoYXIudG9Mb3dlckNhc2UoKVxyXG4gIH0sXHJcbiAgJ1gnOiB7XHJcbiAgICB0ZXN0OiBpc01hc2tEZWxpbWl0ZXJcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGlzTWFzayA9IChjaGFyOiBzdHJpbmcpOiBib29sZWFuID0+IGFsbG93ZWRNYXNrcy5oYXNPd25Qcm9wZXJ0eShjaGFyKVxyXG5cclxuY29uc3QgY29udmVydCA9IChtYXNrOiBNYXNrVHlwZSwgY2hhcjogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4gYWxsb3dlZE1hc2tzW21hc2tdLmNvbnZlcnQgPyBhbGxvd2VkTWFza3NbbWFza10uY29udmVydCEoY2hhcikgOiBjaGFyXHJcbn1cclxuXHJcbmNvbnN0IG1hc2tWYWxpZGF0ZXMgPSAobWFzazogTWFza1R5cGUsIGNoYXI6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gIGlmIChjaGFyID09IG51bGwgfHwgIWlzTWFzayhtYXNrKSkgcmV0dXJuIGZhbHNlXHJcbiAgcmV0dXJuIGFsbG93ZWRNYXNrc1ttYXNrXS50ZXN0KGNoYXIpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBtYXNrVGV4dCA9ICh0ZXh0OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkLCBtYXNrZWQ6IHN0cmluZyB8IHN0cmluZ1tdLCBkb250RmlsbE1hc2tCbGFua3M6IGJvb2xlYW4pOiBzdHJpbmcgPT4ge1xyXG4gIGlmICh0ZXh0ID09IG51bGwpIHJldHVybiAnJ1xyXG4gIHRleHQgPSBTdHJpbmcodGV4dClcclxuICBpZiAoIW1hc2tlZC5sZW5ndGggfHwgIXRleHQubGVuZ3RoKSByZXR1cm4gdGV4dFxyXG4gIGlmICghQXJyYXkuaXNBcnJheShtYXNrZWQpKSBtYXNrZWQgPSBtYXNrZWQuc3BsaXQoJycpXHJcblxyXG4gIGxldCB0ZXh0SW5kZXggPSAwXHJcbiAgbGV0IG1hc2tJbmRleCA9IDBcclxuICBsZXQgbmV3VGV4dCA9ICcnXHJcblxyXG4gIHdoaWxlIChtYXNrSW5kZXggPCBtYXNrZWQubGVuZ3RoKSB7XHJcbiAgICBjb25zdCBtYXNrID0gbWFza2VkW21hc2tJbmRleF1cclxuXHJcbiAgICAvLyBBc3NpZ24gdGhlIG5leHQgY2hhcmFjdGVyXHJcbiAgICBjb25zdCBjaGFyID0gdGV4dFt0ZXh0SW5kZXhdXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgbWFzayBpcyBkZWxpbWl0ZXJcclxuICAgIC8vIGFuZCBjdXJyZW50IGNoYXIgbWF0Y2hlc1xyXG4gICAgaWYgKCFpc01hc2sobWFzaykgJiYgY2hhciA9PT0gbWFzaykge1xyXG4gICAgICBuZXdUZXh0ICs9IG1hc2tcclxuICAgICAgdGV4dEluZGV4KytcclxuICAgIC8vIENoZWNrIGlmIG5vdCBtYXNrXHJcbiAgICB9IGVsc2UgaWYgKCFpc01hc2sobWFzaykgJiYgIWRvbnRGaWxsTWFza0JsYW5rcykge1xyXG4gICAgICBuZXdUZXh0ICs9IG1hc2tcclxuICAgIC8vIENoZWNrIGlmIGlzIG1hc2sgYW5kIHZhbGlkYXRlc1xyXG4gICAgfSBlbHNlIGlmIChtYXNrVmFsaWRhdGVzKG1hc2sgYXMgTWFza1R5cGUsIGNoYXIpKSB7XHJcbiAgICAgIG5ld1RleHQgKz0gY29udmVydChtYXNrIGFzIE1hc2tUeXBlLCBjaGFyKVxyXG4gICAgICB0ZXh0SW5kZXgrK1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG5ld1RleHRcclxuICAgIH1cclxuXHJcbiAgICBtYXNrSW5kZXgrK1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG5ld1RleHRcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHVubWFza1RleHQgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICByZXR1cm4gdGV4dCA/IFN0cmluZyh0ZXh0KS5yZXBsYWNlKG5ldyBSZWdFeHAoZGVmYXVsdERlbGltaXRlcnMsICdnJyksICcnKSA6IHRleHRcclxufVxyXG4iXX0=