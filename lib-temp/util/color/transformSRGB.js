// For converting XYZ to sRGB
const srgbForwardMatrix = [
    [3.2406, -1.5372, -0.4986],
    [-0.9689, 1.8758, 0.0415],
    [0.0557, -0.2040, 1.0570]
];
// Forward gamma adjust
const srgbForwardTransform = (C) => (C <= 0.0031308
    ? C * 12.92
    : 1.055 * C ** (1 / 2.4) - 0.055);
// For converting sRGB to XYZ
const srgbReverseMatrix = [
    [0.4124, 0.3576, 0.1805],
    [0.2126, 0.7152, 0.0722],
    [0.0193, 0.1192, 0.9505]
];
// Reverse gamma adjust
const srgbReverseTransform = (C) => (C <= 0.04045
    ? C / 12.92
    : ((C + 0.055) / 1.055) ** 2.4);
function clamp(value) {
    return Math.max(0, Math.min(1, value));
}
export function fromXYZ(xyz) {
    const rgb = Array(3);
    const transform = srgbForwardTransform;
    const matrix = srgbForwardMatrix;
    // Matrix transform, then gamma adjustment
    for (let i = 0; i < 3; ++i) {
        rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] +
            matrix[i][1] * xyz[1] +
            matrix[i][2] * xyz[2])) * 255);
    }
    // Rescale back to [0, 255]
    return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0);
}
export function toXYZ(rgb) {
    const xyz = [0, 0, 0];
    const transform = srgbReverseTransform;
    const matrix = srgbReverseMatrix;
    // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB
    const r = transform((rgb >> 16 & 0xff) / 255);
    const g = transform((rgb >> 8 & 0xff) / 255);
    const b = transform((rgb >> 0 & 0xff) / 255);
    // Matrix color space transform
    for (let i = 0; i < 3; ++i) {
        xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;
    }
    return xyz;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtU1JHQi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsL2NvbG9yL3RyYW5zZm9ybVNSR0IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsNkJBQTZCO0FBQzdCLE1BQU0saUJBQWlCLEdBQUc7SUFDeEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDMUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0lBQ3pCLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztDQUMxQixDQUFBO0FBRUQsdUJBQXVCO0FBQ3ZCLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxDQUFTLEVBQVUsRUFBRSxDQUFDLENBQ2xELENBQUMsSUFBSSxTQUFTO0lBQ1osQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLO0lBQ1gsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUNuQyxDQUFBO0FBRUQsNkJBQTZCO0FBQzdCLE1BQU0saUJBQWlCLEdBQUc7SUFDeEIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztJQUN4QixDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDO0lBQ3hCLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7Q0FDekIsQ0FBQTtBQUVELHVCQUF1QjtBQUN2QixNQUFNLG9CQUFvQixHQUFHLENBQUMsQ0FBUyxFQUFVLEVBQUUsQ0FBQyxDQUNsRCxDQUFDLElBQUksT0FBTztJQUNWLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSztJQUNYLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FDakMsQ0FBQTtBQUVELFNBQVMsS0FBSyxDQUFFLEtBQWE7SUFDM0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ3hDLENBQUM7QUFFRCxNQUFNLFVBQVUsT0FBTyxDQUFFLEdBQVE7SUFDL0IsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3BCLE1BQU0sU0FBUyxHQUFHLG9CQUFvQixDQUFBO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLGlCQUFpQixDQUFBO0lBRWhDLDBDQUEwQztJQUMxQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ2pDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3RCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtLQUNWO0lBRUQsMkJBQTJCO0lBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDdkQsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUUsR0FBUTtJQUM3QixNQUFNLEdBQUcsR0FBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDMUIsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUE7SUFDdEMsTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUE7SUFFaEMsdUVBQXVFO0lBQ3ZFLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUE7SUFDN0MsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQTtJQUM1QyxNQUFNLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFBO0lBRTVDLCtCQUErQjtJQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO1FBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtLQUNoRTtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJHQiwgWFlaIH0gZnJvbSAnLi4vY29sb3JVdGlscydcclxuXHJcbi8vIEZvciBjb252ZXJ0aW5nIFhZWiB0byBzUkdCXHJcbmNvbnN0IHNyZ2JGb3J3YXJkTWF0cml4ID0gW1xyXG4gIFszLjI0MDYsIC0xLjUzNzIsIC0wLjQ5ODZdLFxyXG4gIFstMC45Njg5LCAxLjg3NTgsIDAuMDQxNV0sXHJcbiAgWzAuMDU1NywgLTAuMjA0MCwgMS4wNTcwXVxyXG5dXHJcblxyXG4vLyBGb3J3YXJkIGdhbW1hIGFkanVzdFxyXG5jb25zdCBzcmdiRm9yd2FyZFRyYW5zZm9ybSA9IChDOiBudW1iZXIpOiBudW1iZXIgPT4gKFxyXG4gIEMgPD0gMC4wMDMxMzA4XHJcbiAgICA/IEMgKiAxMi45MlxyXG4gICAgOiAxLjA1NSAqIEMgKiogKDEgLyAyLjQpIC0gMC4wNTVcclxuKVxyXG5cclxuLy8gRm9yIGNvbnZlcnRpbmcgc1JHQiB0byBYWVpcclxuY29uc3Qgc3JnYlJldmVyc2VNYXRyaXggPSBbXHJcbiAgWzAuNDEyNCwgMC4zNTc2LCAwLjE4MDVdLFxyXG4gIFswLjIxMjYsIDAuNzE1MiwgMC4wNzIyXSxcclxuICBbMC4wMTkzLCAwLjExOTIsIDAuOTUwNV1cclxuXVxyXG5cclxuLy8gUmV2ZXJzZSBnYW1tYSBhZGp1c3RcclxuY29uc3Qgc3JnYlJldmVyc2VUcmFuc2Zvcm0gPSAoQzogbnVtYmVyKTogbnVtYmVyID0+IChcclxuICBDIDw9IDAuMDQwNDVcclxuICAgID8gQyAvIDEyLjkyXHJcbiAgICA6ICgoQyArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjRcclxuKVxyXG5cclxuZnVuY3Rpb24gY2xhbXAgKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xyXG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB2YWx1ZSkpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tWFlaICh4eXo6IFhZWik6IFJHQiB7XHJcbiAgY29uc3QgcmdiID0gQXJyYXkoMylcclxuICBjb25zdCB0cmFuc2Zvcm0gPSBzcmdiRm9yd2FyZFRyYW5zZm9ybVxyXG4gIGNvbnN0IG1hdHJpeCA9IHNyZ2JGb3J3YXJkTWF0cml4XHJcblxyXG4gIC8vIE1hdHJpeCB0cmFuc2Zvcm0sIHRoZW4gZ2FtbWEgYWRqdXN0bWVudFxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7XHJcbiAgICByZ2JbaV0gPSBNYXRoLnJvdW5kKGNsYW1wKHRyYW5zZm9ybShcclxuICAgICAgbWF0cml4W2ldWzBdICogeHl6WzBdICtcclxuICAgICAgbWF0cml4W2ldWzFdICogeHl6WzFdICtcclxuICAgICAgbWF0cml4W2ldWzJdICogeHl6WzJdXHJcbiAgICApKSAqIDI1NSlcclxuICB9XHJcblxyXG4gIC8vIFJlc2NhbGUgYmFjayB0byBbMCwgMjU1XVxyXG4gIHJldHVybiAocmdiWzBdIDw8IDE2KSArIChyZ2JbMV0gPDwgOCkgKyAocmdiWzJdIDw8IDApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b1hZWiAocmdiOiBSR0IpOiBYWVoge1xyXG4gIGNvbnN0IHh5ejogWFlaID0gWzAsIDAsIDBdXHJcbiAgY29uc3QgdHJhbnNmb3JtID0gc3JnYlJldmVyc2VUcmFuc2Zvcm1cclxuICBjb25zdCBtYXRyaXggPSBzcmdiUmV2ZXJzZU1hdHJpeFxyXG5cclxuICAvLyBSZXNjYWxlIGZyb20gWzAsIDI1NV0gdG8gWzAsIDFdIHRoZW4gYWRqdXN0IHNSR0IgZ2FtbWEgdG8gbGluZWFyIFJHQlxyXG4gIGNvbnN0IHIgPSB0cmFuc2Zvcm0oKHJnYiA+PiAxNiAmIDB4ZmYpIC8gMjU1KVxyXG4gIGNvbnN0IGcgPSB0cmFuc2Zvcm0oKHJnYiA+PiA4ICYgMHhmZikgLyAyNTUpXHJcbiAgY29uc3QgYiA9IHRyYW5zZm9ybSgocmdiID4+IDAgJiAweGZmKSAvIDI1NSlcclxuXHJcbiAgLy8gTWF0cml4IGNvbG9yIHNwYWNlIHRyYW5zZm9ybVxyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgKytpKSB7XHJcbiAgICB4eXpbaV0gPSBtYXRyaXhbaV1bMF0gKiByICsgbWF0cml4W2ldWzFdICogZyArIG1hdHJpeFtpXVsyXSAqIGJcclxuICB9XHJcblxyXG4gIHJldHVybiB4eXpcclxufVxyXG4iXX0=