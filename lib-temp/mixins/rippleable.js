// Directives
import Ripple from '../directives/ripple';
// Types
import Vue from 'vue';
export default Vue.extend({
    name: 'rippleable',
    directives: { Ripple },
    props: {
        ripple: {
            type: [Boolean, Object],
            default: true
        }
    },
    methods: {
        genRipple(data = {}) {
            if (!this.ripple)
                return null;
            data.staticClass = 'v-input--selection-controls__ripple';
            data.directives = data.directives || [];
            data.directives.push({
                name: 'ripple',
                value: { center: true }
            });
            data.on = Object.assign({
                click: this.onChange
            }, this.$listeners);
            return this.$createElement('div', data);
        },
        onChange() { }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmlwcGxlYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taXhpbnMvcmlwcGxlYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhO0FBQ2IsT0FBTyxNQUFNLE1BQU0sc0JBQXNCLENBQUE7QUFFekMsUUFBUTtBQUNSLE9BQU8sR0FBeUMsTUFBTSxLQUFLLENBQUE7QUFFM0QsZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3hCLElBQUksRUFBRSxZQUFZO0lBRWxCLFVBQVUsRUFBRSxFQUFFLE1BQU0sRUFBRTtJQUV0QixLQUFLLEVBQUU7UUFDTCxNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQ3ZCLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUVELE9BQU8sRUFBRTtRQUNQLFNBQVMsQ0FBRSxPQUFrQixFQUFFO1lBQzdCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtnQkFBRSxPQUFPLElBQUksQ0FBQTtZQUU3QixJQUFJLENBQUMsV0FBVyxHQUFHLHFDQUFxQyxDQUFBO1lBRXhELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUE7WUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7Z0JBQ25CLElBQUksRUFBRSxRQUFRO2dCQUNkLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7YUFDTixDQUFDLENBQUE7WUFDcEIsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUN0QixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVE7YUFDckIsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7WUFFbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtRQUN6QyxDQUFDO1FBQ0QsUUFBUSxLQUFLLENBQUM7S0FDZjtDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIERpcmVjdGl2ZXNcclxuaW1wb3J0IFJpcHBsZSBmcm9tICcuLi9kaXJlY3RpdmVzL3JpcHBsZSdcclxuXHJcbi8vIFR5cGVzXHJcbmltcG9ydCBWdWUsIHsgVk5vZGUsIFZOb2RlRGF0YSwgVk5vZGVEaXJlY3RpdmUgfSBmcm9tICd2dWUnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHtcclxuICBuYW1lOiAncmlwcGxlYWJsZScsXHJcblxyXG4gIGRpcmVjdGl2ZXM6IHsgUmlwcGxlIH0sXHJcblxyXG4gIHByb3BzOiB7XHJcbiAgICByaXBwbGU6IHtcclxuICAgICAgdHlwZTogW0Jvb2xlYW4sIE9iamVjdF0sXHJcbiAgICAgIGRlZmF1bHQ6IHRydWVcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBnZW5SaXBwbGUgKGRhdGE6IFZOb2RlRGF0YSA9IHt9KTogVk5vZGUgfCBudWxsIHtcclxuICAgICAgaWYgKCF0aGlzLnJpcHBsZSkgcmV0dXJuIG51bGxcclxuXHJcbiAgICAgIGRhdGEuc3RhdGljQ2xhc3MgPSAndi1pbnB1dC0tc2VsZWN0aW9uLWNvbnRyb2xzX19yaXBwbGUnXHJcblxyXG4gICAgICBkYXRhLmRpcmVjdGl2ZXMgPSBkYXRhLmRpcmVjdGl2ZXMgfHwgW11cclxuICAgICAgZGF0YS5kaXJlY3RpdmVzLnB1c2goe1xyXG4gICAgICAgIG5hbWU6ICdyaXBwbGUnLFxyXG4gICAgICAgIHZhbHVlOiB7IGNlbnRlcjogdHJ1ZSB9XHJcbiAgICAgIH0gYXMgVk5vZGVEaXJlY3RpdmUpXHJcbiAgICAgIGRhdGEub24gPSBPYmplY3QuYXNzaWduKHtcclxuICAgICAgICBjbGljazogdGhpcy5vbkNoYW5nZVxyXG4gICAgICB9LCB0aGlzLiRsaXN0ZW5lcnMpXHJcblxyXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgZGF0YSlcclxuICAgIH0sXHJcbiAgICBvbkNoYW5nZSAoKSB7fVxyXG4gIH1cclxufSlcclxuIl19