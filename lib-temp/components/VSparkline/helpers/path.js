import { checkCollinear, getDistance, moveTo } from './math';
/**
 * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18
 */
export function genPath(points, radius, fill = false, height = 75) {
    const start = points.shift();
    const end = points[points.length - 1];
    return ((fill ? `M${start.x} ${height} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +
        points
            .map((point, index) => {
            const next = points[index + 1];
            const prev = points[index - 1] || start;
            const isCollinear = next && checkCollinear(next, point, prev);
            if (!next || isCollinear) {
                return `L${point.x} ${point.y}`;
            }
            const threshold = Math.min(getDistance(prev, point), getDistance(next, point));
            const isTooCloseForRadius = threshold / 2 < radius;
            const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;
            const before = moveTo(prev, point, radiusForPoint);
            const after = moveTo(next, point, radiusForPoint);
            return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`;
        })
            .join('') +
        (fill ? `L${end.x} ${height} Z` : ''));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUU1RDs7R0FFRztBQUNILE1BQU0sVUFBVSxPQUFPLENBQUUsTUFBZSxFQUFFLE1BQWMsRUFBRSxJQUFJLEdBQUcsS0FBSyxFQUFFLE1BQU0sR0FBRyxFQUFFO0lBQ2pGLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUcsQ0FBQTtJQUM3QixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUVyQyxPQUFPLENBQ0wsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEYsTUFBTTthQUNILEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNwQixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFBO1lBQ3ZDLE1BQU0sV0FBVyxHQUFHLElBQUksSUFBSSxjQUFjLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQTtZQUU3RCxJQUFJLENBQUMsSUFBSSxJQUFJLFdBQVcsRUFBRTtnQkFDeEIsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFBO2FBQ2hDO1lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDeEIsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDeEIsV0FBVyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FDekIsQ0FBQTtZQUNELE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUE7WUFDbEQsTUFBTSxjQUFjLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQTtZQUVuRSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQTtZQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQTtZQUVqRCxPQUFPLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQTtRQUMvRSxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ1gsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9WU3BhcmtsaW5lJ1xyXG5pbXBvcnQgeyBjaGVja0NvbGxpbmVhciwgZ2V0RGlzdGFuY2UsIG1vdmVUbyB9IGZyb20gJy4vbWF0aCdcclxuXHJcbi8qKlxyXG4gKiBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS91bnNwbGFzaC9yZWFjdC10cmVuZC9ibG9iL21hc3Rlci9zcmMvaGVscGVycy9ET00uaGVscGVycy5qcyNMMThcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5QYXRoIChwb2ludHM6IFBvaW50W10sIHJhZGl1czogbnVtYmVyLCBmaWxsID0gZmFsc2UsIGhlaWdodCA9IDc1KSB7XHJcbiAgY29uc3Qgc3RhcnQgPSBwb2ludHMuc2hpZnQoKSFcclxuICBjb25zdCBlbmQgPSBwb2ludHNbcG9pbnRzLmxlbmd0aCAtIDFdXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICAoZmlsbCA/IGBNJHtzdGFydC54fSAke2hlaWdodH0gTCR7c3RhcnQueH0gJHtzdGFydC55fWAgOiBgTSR7c3RhcnQueH0gJHtzdGFydC55fWApICtcclxuICAgIHBvaW50c1xyXG4gICAgICAubWFwKChwb2ludCwgaW5kZXgpID0+IHtcclxuICAgICAgICBjb25zdCBuZXh0ID0gcG9pbnRzW2luZGV4ICsgMV1cclxuICAgICAgICBjb25zdCBwcmV2ID0gcG9pbnRzW2luZGV4IC0gMV0gfHwgc3RhcnRcclxuICAgICAgICBjb25zdCBpc0NvbGxpbmVhciA9IG5leHQgJiYgY2hlY2tDb2xsaW5lYXIobmV4dCwgcG9pbnQsIHByZXYpXHJcblxyXG4gICAgICAgIGlmICghbmV4dCB8fCBpc0NvbGxpbmVhcikge1xyXG4gICAgICAgICAgcmV0dXJuIGBMJHtwb2ludC54fSAke3BvaW50Lnl9YFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGhyZXNob2xkID0gTWF0aC5taW4oXHJcbiAgICAgICAgICBnZXREaXN0YW5jZShwcmV2LCBwb2ludCksXHJcbiAgICAgICAgICBnZXREaXN0YW5jZShuZXh0LCBwb2ludClcclxuICAgICAgICApXHJcbiAgICAgICAgY29uc3QgaXNUb29DbG9zZUZvclJhZGl1cyA9IHRocmVzaG9sZCAvIDIgPCByYWRpdXNcclxuICAgICAgICBjb25zdCByYWRpdXNGb3JQb2ludCA9IGlzVG9vQ2xvc2VGb3JSYWRpdXMgPyB0aHJlc2hvbGQgLyAyIDogcmFkaXVzXHJcblxyXG4gICAgICAgIGNvbnN0IGJlZm9yZSA9IG1vdmVUbyhwcmV2LCBwb2ludCwgcmFkaXVzRm9yUG9pbnQpXHJcbiAgICAgICAgY29uc3QgYWZ0ZXIgPSBtb3ZlVG8obmV4dCwgcG9pbnQsIHJhZGl1c0ZvclBvaW50KVxyXG5cclxuICAgICAgICByZXR1cm4gYEwke2JlZm9yZS54fSAke2JlZm9yZS55fVMke3BvaW50Lnh9ICR7cG9pbnQueX0gJHthZnRlci54fSAke2FmdGVyLnl9YFxyXG4gICAgICB9KVxyXG4gICAgICAuam9pbignJykgK1xyXG4gICAgKGZpbGwgPyBgTCR7ZW5kLnh9ICR7aGVpZ2h0fSBaYCA6ICcnKSlcclxufVxyXG4iXX0=