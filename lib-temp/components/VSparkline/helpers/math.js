function int(value) {
    return parseInt(value, 10);
}
/**
 * https://en.wikipedia.org/wiki/Collinearity
 * x=(x1+x2)/2
 * y=(y1+y2)/2
 */
export function checkCollinear(p0, p1, p2) {
    return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y);
}
export function getDistance(p1, p2) {
    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}
export function moveTo(to, from, radius) {
    const vector = { x: to.x - from.x, y: to.y - from.y };
    const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));
    const unitVector = { x: vector.x / length, y: vector.y / length };
    return {
        x: from.x + unitVector.x * radius,
        y: from.y + unitVector.y * radius
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9tYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLFNBQVMsR0FBRyxDQUFFLEtBQXNCO0lBQ2xDLE9BQU8sUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQTtBQUM1QixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQUUsRUFBUyxFQUFFLEVBQVMsRUFBRSxFQUFTO0lBQzdELE9BQU8sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNqRixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBRSxFQUFTLEVBQUUsRUFBUztJQUMvQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQ2QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQ3BELENBQUE7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBRSxFQUFTLEVBQUUsSUFBVyxFQUFFLE1BQWM7SUFDNUQsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQTtJQUNyRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3ZFLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFBO0lBRWpFLE9BQU87UUFDTCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxHQUFHLE1BQU07UUFDakMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsR0FBRyxNQUFNO0tBQ2xDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9WU3BhcmtsaW5lJ1xyXG5cclxuZnVuY3Rpb24gaW50ICh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyIHtcclxuICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKVxyXG59XHJcblxyXG4vKipcclxuICogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29sbGluZWFyaXR5XHJcbiAqIHg9KHgxK3gyKS8yXHJcbiAqIHk9KHkxK3kyKS8yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDb2xsaW5lYXIgKHAwOiBQb2ludCwgcDE6IFBvaW50LCBwMjogUG9pbnQpOiBib29sZWFuIHtcclxuICByZXR1cm4gaW50KHAwLnggKyBwMi54KSA9PT0gaW50KDIgKiBwMS54KSAmJiBpbnQocDAueSArIHAyLnkpID09PSBpbnQoMiAqIHAxLnkpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREaXN0YW5jZSAocDE6IFBvaW50LCBwMjogUG9pbnQpOiBudW1iZXIge1xyXG4gIHJldHVybiBNYXRoLnNxcnQoXHJcbiAgICBNYXRoLnBvdyhwMi54IC0gcDEueCwgMikgKyBNYXRoLnBvdyhwMi55IC0gcDEueSwgMilcclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtb3ZlVG8gKHRvOiBQb2ludCwgZnJvbTogUG9pbnQsIHJhZGl1czogbnVtYmVyKSB7XHJcbiAgY29uc3QgdmVjdG9yID0geyB4OiB0by54IC0gZnJvbS54LCB5OiB0by55IC0gZnJvbS55IH1cclxuICBjb25zdCBsZW5ndGggPSBNYXRoLnNxcnQoKHZlY3Rvci54ICogdmVjdG9yLngpICsgKHZlY3Rvci55ICogdmVjdG9yLnkpKVxyXG4gIGNvbnN0IHVuaXRWZWN0b3IgPSB7IHg6IHZlY3Rvci54IC8gbGVuZ3RoLCB5OiB2ZWN0b3IueSAvIGxlbmd0aCB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB4OiBmcm9tLnggKyB1bml0VmVjdG9yLnggKiByYWRpdXMsXHJcbiAgICB5OiBmcm9tLnkgKyB1bml0VmVjdG9yLnkgKiByYWRpdXNcclxuICB9XHJcbn1cclxuIl19