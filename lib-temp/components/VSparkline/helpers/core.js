export function genPoints(points, boundary, type) {
    const { minX, minY, maxX, maxY } = boundary;
    const normalisedPoints = points.map(item => (typeof item === 'number' ? item : item.value));
    const totalPoints = normalisedPoints.length;
    const maxValue = Math.max(...normalisedPoints) + 1;
    let minValue = Math.min(...normalisedPoints);
    if (minValue)
        minValue -= 1;
    let gridX = (maxX - minX) / (totalPoints - 1);
    if (type === 'bar')
        gridX = maxX / totalPoints;
    const gridY = (maxY - minY) / (maxValue - minValue);
    return normalisedPoints.map((value, index) => {
        return {
            x: minX + index * gridX,
            y: maxY -
                (value - minValue) * gridY +
                +(index === totalPoints - 1) * 0.00001 -
                +(index === 0) * 0.00001,
            value
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxTQUFTLENBQ3ZCLE1BQXVCLEVBQ3ZCLFFBQWtCLEVBQ2xCLElBQVk7SUFFWixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFBO0lBQzNDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FDakMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ3ZELENBQUE7SUFDRCxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUE7SUFDM0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2xELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFBO0lBRTVDLElBQUksUUFBUTtRQUFFLFFBQVEsSUFBSSxDQUFDLENBQUE7SUFDM0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDN0MsSUFBSSxJQUFJLEtBQUssS0FBSztRQUFFLEtBQUssR0FBRyxJQUFJLEdBQUcsV0FBVyxDQUFBO0lBQzlDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFBO0lBRW5ELE9BQU8sZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzNDLE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLO1lBQ3ZCLENBQUMsRUFDQyxJQUFJO2dCQUNKLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEtBQUs7Z0JBQzFCLENBQUMsQ0FBQyxLQUFLLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87Z0JBQ3RDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsT0FBTztZQUMxQixLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNwYXJrbGluZUl0ZW0sIEJvdW5kYXJ5LCBQb2ludCB9IGZyb20gJy4uL1ZTcGFya2xpbmUnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuUG9pbnRzIChcclxuICBwb2ludHM6IFNwYXJrbGluZUl0ZW1bXSxcclxuICBib3VuZGFyeTogQm91bmRhcnksXHJcbiAgdHlwZTogU3RyaW5nXHJcbik6IFBvaW50W10ge1xyXG4gIGNvbnN0IHsgbWluWCwgbWluWSwgbWF4WCwgbWF4WSB9ID0gYm91bmRhcnlcclxuICBjb25zdCBub3JtYWxpc2VkUG9pbnRzID0gcG9pbnRzLm1hcChcclxuICAgIGl0ZW0gPT4gKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJyA/IGl0ZW0gOiBpdGVtLnZhbHVlKVxyXG4gIClcclxuICBjb25zdCB0b3RhbFBvaW50cyA9IG5vcm1hbGlzZWRQb2ludHMubGVuZ3RoXHJcbiAgY29uc3QgbWF4VmFsdWUgPSBNYXRoLm1heCguLi5ub3JtYWxpc2VkUG9pbnRzKSArIDFcclxuICBsZXQgbWluVmFsdWUgPSBNYXRoLm1pbiguLi5ub3JtYWxpc2VkUG9pbnRzKVxyXG5cclxuICBpZiAobWluVmFsdWUpIG1pblZhbHVlIC09IDFcclxuICBsZXQgZ3JpZFggPSAobWF4WCAtIG1pblgpIC8gKHRvdGFsUG9pbnRzIC0gMSlcclxuICBpZiAodHlwZSA9PT0gJ2JhcicpIGdyaWRYID0gbWF4WCAvIHRvdGFsUG9pbnRzXHJcbiAgY29uc3QgZ3JpZFkgPSAobWF4WSAtIG1pblkpIC8gKG1heFZhbHVlIC0gbWluVmFsdWUpXHJcblxyXG4gIHJldHVybiBub3JtYWxpc2VkUG9pbnRzLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4OiBtaW5YICsgaW5kZXggKiBncmlkWCxcclxuICAgICAgeTpcclxuICAgICAgICBtYXhZIC1cclxuICAgICAgICAodmFsdWUgLSBtaW5WYWx1ZSkgKiBncmlkWSArXHJcbiAgICAgICAgKyhpbmRleCA9PT0gdG90YWxQb2ludHMgLSAxKSAqIDAuMDAwMDEgLVxyXG4gICAgICAgICsoaW5kZXggPT09IDApICogMC4wMDAwMSxcclxuICAgICAgdmFsdWVcclxuICAgIH1cclxuICB9KVxyXG59XHJcbiJdfQ==