export function genPoints(points, boundary) {
    const { minX, minY, maxX, maxY } = boundary;
    const normalisedPoints = points.map(item => (typeof item === 'number' ? item : item.value));
    const maxValue = Math.max(...normalisedPoints) + 1;
    let minValue = Math.min(...normalisedPoints);
    if (minValue)
        minValue -= 1;
    const gridX = (maxX - minX) / (normalisedPoints.length - 1);
    const gridY = (maxY - minY) / (maxValue - minValue);
    return normalisedPoints.map((value, index) => {
        return {
            x: index * gridX + minX,
            y: maxY -
                (value - minValue) * gridY +
                +(index === normalisedPoints.length - 1) * 0.00001 -
                +(index === 0) * 0.00001,
            value
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxTQUFTLENBQUUsTUFBdUIsRUFBRSxRQUFrQjtJQUNwRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFBO0lBQzNDLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQzNGLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNsRCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQTtJQUU1QyxJQUFJLFFBQVE7UUFBRSxRQUFRLElBQUksQ0FBQyxDQUFBO0lBRTNCLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQzNELE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFBO0lBRW5ELE9BQU8sZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzNDLE9BQU87WUFDTCxDQUFDLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJO1lBQ3ZCLENBQUMsRUFDQyxJQUFJO2dCQUNKLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEtBQUs7Z0JBQzFCLENBQUMsQ0FBQyxLQUFLLEtBQUssZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87Z0JBQ2xELENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsT0FBTztZQUMxQixLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNwYXJrbGluZUl0ZW0sIEJvdW5kYXJ5LCBQb2ludCB9IGZyb20gJy4uL1ZTcGFya2xpbmUnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuUG9pbnRzIChwb2ludHM6IFNwYXJrbGluZUl0ZW1bXSwgYm91bmRhcnk6IEJvdW5kYXJ5KTogUG9pbnRbXSB7XHJcbiAgY29uc3QgeyBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZIH0gPSBib3VuZGFyeVxyXG4gIGNvbnN0IG5vcm1hbGlzZWRQb2ludHMgPSBwb2ludHMubWFwKGl0ZW0gPT4gKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJyA/IGl0ZW0gOiBpdGVtLnZhbHVlKSlcclxuICBjb25zdCBtYXhWYWx1ZSA9IE1hdGgubWF4KC4uLm5vcm1hbGlzZWRQb2ludHMpICsgMVxyXG4gIGxldCBtaW5WYWx1ZSA9IE1hdGgubWluKC4uLm5vcm1hbGlzZWRQb2ludHMpXHJcblxyXG4gIGlmIChtaW5WYWx1ZSkgbWluVmFsdWUgLT0gMVxyXG5cclxuICBjb25zdCBncmlkWCA9IChtYXhYIC0gbWluWCkgLyAobm9ybWFsaXNlZFBvaW50cy5sZW5ndGggLSAxKVxyXG4gIGNvbnN0IGdyaWRZID0gKG1heFkgLSBtaW5ZKSAvIChtYXhWYWx1ZSAtIG1pblZhbHVlKVxyXG5cclxuICByZXR1cm4gbm9ybWFsaXNlZFBvaW50cy5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeDogaW5kZXggKiBncmlkWCArIG1pblgsXHJcbiAgICAgIHk6XHJcbiAgICAgICAgbWF4WSAtXHJcbiAgICAgICAgKHZhbHVlIC0gbWluVmFsdWUpICogZ3JpZFkgK1xyXG4gICAgICAgICsoaW5kZXggPT09IG5vcm1hbGlzZWRQb2ludHMubGVuZ3RoIC0gMSkgKiAwLjAwMDAxIC1cclxuICAgICAgICArKGluZGV4ID09PSAwKSAqIDAuMDAwMDEsXHJcbiAgICAgIHZhbHVlXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG4iXX0=