function dateFromStr(strDate, deltaDay = 0, deltaMonth = 0, deltaYear = 0) {
    let yr = parseInt(strDate.substring(0, 4));
    let mon = parseInt(strDate.substring(5, 8));
    let dt = parseInt(strDate.substring(8, 10));
    let d = new Date(yr, mon - 1, dt);
    d.setMonth(d.getMonth() + deltaMonth, d.getDate() + deltaDay);
    d.setFullYear(d.getFullYear() + deltaYear);
    return d;
}
export default function isDateInRange(date, range) {
    let dateToCheck = dateFromStr(date);
    if (Array.isArray(range)) {
        range.sort();
        if (typeof range[0] === 'string' && typeof range[1] === 'string') {
            let startDate = dateFromStr(range[0]);
            let endDate = dateFromStr(range[1]);
            return startDate.getTime() <= dateToCheck.getTime() && endDate.getTime() >= dateToCheck.getTime();
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNEYXRlSW5SYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL3V0aWwvaXNEYXRlSW5SYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFdBQVcsQ0FBQyxPQUFlLEVBQUUsUUFBUSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDO0lBQzdFLElBQUksRUFBRSxHQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzFDLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzFDLElBQUksRUFBRSxHQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRTNDLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBRS9CLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUMsUUFBUSxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUMsU0FBUyxDQUFDLENBQUE7SUFFeEMsT0FBTyxDQUFDLENBQUE7QUFDWixDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sVUFBVSxhQUFhLENBQUUsSUFBWSxFQUFFLEtBQVU7SUFDM0QsSUFBSSxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ25DLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUE7UUFFWixJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7WUFDOUQsSUFBSSxTQUFTLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3JDLElBQUksT0FBTyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUVuQyxPQUFPLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtTQUNwRztLQUNKO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGRhdGVGcm9tU3RyKHN0ckRhdGU6IHN0cmluZywgZGVsdGFEYXkgPSAwLCBkZWx0YU1vbnRoID0gMCwgZGVsdGFZZWFyID0gMCkge1xyXG4gICAgbGV0IHlyICA9IHBhcnNlSW50KHN0ckRhdGUuc3Vic3RyaW5nKDAsNCkpXHJcbiAgICBsZXQgbW9uID0gcGFyc2VJbnQoc3RyRGF0ZS5zdWJzdHJpbmcoNSw4KSlcclxuICAgIGxldCBkdCAgPSBwYXJzZUludChzdHJEYXRlLnN1YnN0cmluZyg4LDEwKSlcclxuXHJcbiAgICBsZXQgZCA9IG5ldyBEYXRlKHlyLCBtb24tMSwgZHQpXHJcblxyXG4gICAgZC5zZXRNb250aChkLmdldE1vbnRoKCkrZGVsdGFNb250aCwgZC5nZXREYXRlKCkrZGVsdGFEYXkpXHJcbiAgICBkLnNldEZ1bGxZZWFyKGQuZ2V0RnVsbFllYXIoKStkZWx0YVllYXIpXHJcblxyXG4gICAgcmV0dXJuIGRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlSW5SYW5nZSAoZGF0ZTogc3RyaW5nLCByYW5nZTogYW55KSA6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGRhdGVUb0NoZWNrID0gZGF0ZUZyb21TdHIoZGF0ZSlcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHJhbmdlKSkge1xyXG4gICAgICAgIHJhbmdlLnNvcnQoKVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHJhbmdlWzBdID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmFuZ2VbMV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIGxldCBzdGFydERhdGUgPSBkYXRlRnJvbVN0cihyYW5nZVswXSlcclxuICAgICAgICAgICAgbGV0IGVuZERhdGUgPSBkYXRlRnJvbVN0cihyYW5nZVsxXSlcclxuICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0RGF0ZS5nZXRUaW1lKCkgPD0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpICYmIGVuZERhdGUuZ2V0VGltZSgpID49IGRhdGVUb0NoZWNrLmdldFRpbWUoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxufSJdfQ==