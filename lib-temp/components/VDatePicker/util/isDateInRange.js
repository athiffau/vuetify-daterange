function dateFromStr(strDate, deltaDay = 0, deltaMonth = 0, deltaYear = 0) {
    if (typeof strDate === 'string') {
        const yr = parseInt(strDate.substring(0, 4));
        const mon = parseInt(strDate.substring(5, 8));
        const dt = parseInt(strDate.substring(8, 10));
        const d = new Date(yr, mon - 1, dt);
        if (typeof d.setMonth === 'function') {
            d.setMonth(d.getMonth() + deltaMonth, d.getDate() + deltaDay);
            d.setFullYear(d.getFullYear() + deltaYear);
            return d;
        }
    }
    return null;
}
export function isHoverAfterStartDate(startDate, hoveringDate) {
    const _std = dateFromStr(startDate);
    const _htd = dateFromStr(hoveringDate);
    return (_std && _htd)
        ? _htd.getTime() > _std.getTime()
        : false;
}
export function isHoverBeforeStartDate(startDate, hoveringDate) {
    const _std = dateFromStr(startDate);
    const _htd = dateFromStr(hoveringDate);
    return (_std && _htd)
        ? _htd.getTime() < _std.getTime()
        : false;
}
export function isDateInHoverRange(btnDate, startDate, hoveringDate) {
    const _me = dateFromStr(btnDate);
    const _std = dateFromStr(startDate);
    const _htd = dateFromStr(hoveringDate);
    return (_std && _htd && _me)
        ? (_me.getTime() > _std.getTime() && _me.getTime() <= _htd.getTime()) ||
            (_me.getTime() < _std.getTime() && _me.getTime() >= _htd.getTime())
        : false;
}
export default function isDateInRange(date, range) {
    const dateToCheck = dateFromStr(date);
    if (Array.isArray(range)) {
        if (typeof range[0] === 'string' && typeof range[1] === 'string') {
            const startDate = dateFromStr(range[0]);
            const endDate = dateFromStr(range[1]);
            return (startDate && endDate && dateToCheck)
                ? startDate.getTime() <= dateToCheck.getTime() && endDate.getTime() >= dateToCheck.getTime()
                : false;
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNEYXRlSW5SYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL3V0aWwvaXNEYXRlSW5SYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLFdBQVcsQ0FBRSxPQUFzQixFQUFFLFFBQVEsR0FBRyxDQUFDLEVBQUUsVUFBVSxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQztJQUN2RixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUMvQixNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM1QyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM3QyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUU3QyxNQUFNLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUVuQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFFBQVEsS0FBSyxVQUFVLEVBQUU7WUFDcEMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsVUFBVSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxRQUFRLENBQUMsQ0FBQTtZQUM3RCxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQTtZQUUxQyxPQUFPLENBQUMsQ0FBQTtTQUNUO0tBQ0Y7SUFFRCxPQUFPLElBQUksQ0FBQTtBQUNiLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUUsU0FBYyxFQUFFLFlBQW9CO0lBQ3pFLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNuQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDdEMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7UUFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2pDLENBQUMsQ0FBQyxLQUFLLENBQUE7QUFDWCxDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFFLFNBQWMsRUFBRSxZQUFvQjtJQUMxRSxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDbkMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3RDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO1FBQ25CLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNqQyxDQUFDLENBQUMsS0FBSyxDQUFBO0FBQ1gsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBRSxPQUFlLEVBQUUsU0FBYyxFQUFFLFlBQW9CO0lBQ3ZGLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNoQyxNQUFNLElBQUksR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDbkMsTUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBRXRDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbkUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckUsQ0FBQyxDQUFDLEtBQUssQ0FBQTtBQUNYLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxVQUFVLGFBQWEsQ0FBRSxJQUFZLEVBQUUsS0FBVTtJQUM3RCxNQUFNLFdBQVcsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFckMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLElBQUksT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUNoRSxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdkMsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBRXJDLE9BQU8sQ0FBQyxTQUFTLElBQUksT0FBTyxJQUFJLFdBQVcsQ0FBQztnQkFDMUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7Z0JBQzVGLENBQUMsQ0FBQyxLQUFLLENBQUE7U0FDVjtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZGF0ZUZyb21TdHIgKHN0ckRhdGU6IHN0cmluZyB8IG51bGwsIGRlbHRhRGF5ID0gMCwgZGVsdGFNb250aCA9IDAsIGRlbHRhWWVhciA9IDApIHtcclxuICBpZiAodHlwZW9mIHN0ckRhdGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBjb25zdCB5ciA9IHBhcnNlSW50KHN0ckRhdGUuc3Vic3RyaW5nKDAsIDQpKVxyXG4gICAgY29uc3QgbW9uID0gcGFyc2VJbnQoc3RyRGF0ZS5zdWJzdHJpbmcoNSwgOCkpXHJcbiAgICBjb25zdCBkdCA9IHBhcnNlSW50KHN0ckRhdGUuc3Vic3RyaW5nKDgsIDEwKSlcclxuXHJcbiAgICBjb25zdCBkID0gbmV3IERhdGUoeXIsIG1vbiAtIDEsIGR0KVxyXG5cclxuICAgIGlmICh0eXBlb2YgZC5zZXRNb250aCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICBkLnNldE1vbnRoKGQuZ2V0TW9udGgoKSArIGRlbHRhTW9udGgsIGQuZ2V0RGF0ZSgpICsgZGVsdGFEYXkpXHJcbiAgICAgIGQuc2V0RnVsbFllYXIoZC5nZXRGdWxsWWVhcigpICsgZGVsdGFZZWFyKVxyXG5cclxuICAgICAgcmV0dXJuIGRcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0hvdmVyQWZ0ZXJTdGFydERhdGUgKHN0YXJ0RGF0ZTogYW55LCBob3ZlcmluZ0RhdGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IF9zdGQgPSBkYXRlRnJvbVN0cihzdGFydERhdGUpXHJcbiAgY29uc3QgX2h0ZCA9IGRhdGVGcm9tU3RyKGhvdmVyaW5nRGF0ZSlcclxuICByZXR1cm4gKF9zdGQgJiYgX2h0ZClcclxuICAgID8gX2h0ZC5nZXRUaW1lKCkgPiBfc3RkLmdldFRpbWUoKVxyXG4gICAgOiBmYWxzZVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNIb3ZlckJlZm9yZVN0YXJ0RGF0ZSAoc3RhcnREYXRlOiBhbnksIGhvdmVyaW5nRGF0ZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgX3N0ZCA9IGRhdGVGcm9tU3RyKHN0YXJ0RGF0ZSlcclxuICBjb25zdCBfaHRkID0gZGF0ZUZyb21TdHIoaG92ZXJpbmdEYXRlKVxyXG4gIHJldHVybiAoX3N0ZCAmJiBfaHRkKVxyXG4gICAgPyBfaHRkLmdldFRpbWUoKSA8IF9zdGQuZ2V0VGltZSgpXHJcbiAgICA6IGZhbHNlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGVJbkhvdmVyUmFuZ2UgKGJ0bkRhdGU6IHN0cmluZywgc3RhcnREYXRlOiBhbnksIGhvdmVyaW5nRGF0ZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgX21lID0gZGF0ZUZyb21TdHIoYnRuRGF0ZSlcclxuICBjb25zdCBfc3RkID0gZGF0ZUZyb21TdHIoc3RhcnREYXRlKVxyXG4gIGNvbnN0IF9odGQgPSBkYXRlRnJvbVN0cihob3ZlcmluZ0RhdGUpXHJcblxyXG4gIHJldHVybiAoX3N0ZCAmJiBfaHRkICYmIF9tZSlcclxuICAgID8gKF9tZS5nZXRUaW1lKCkgPiBfc3RkLmdldFRpbWUoKSAmJiBfbWUuZ2V0VGltZSgpIDw9IF9odGQuZ2V0VGltZSgpKSB8fFxyXG4gICAgICAoX21lLmdldFRpbWUoKSA8IF9zdGQuZ2V0VGltZSgpICYmIF9tZS5nZXRUaW1lKCkgPj0gX2h0ZC5nZXRUaW1lKCkpXHJcbiAgICA6IGZhbHNlXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZUluUmFuZ2UgKGRhdGU6IHN0cmluZywgcmFuZ2U6IGFueSk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGRhdGVUb0NoZWNrID0gZGF0ZUZyb21TdHIoZGF0ZSlcclxuXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkocmFuZ2UpKSB7XHJcbiAgICBpZiAodHlwZW9mIHJhbmdlWzBdID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgcmFuZ2VbMV0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IGRhdGVGcm9tU3RyKHJhbmdlWzBdKVxyXG4gICAgICBjb25zdCBlbmREYXRlID0gZGF0ZUZyb21TdHIocmFuZ2VbMV0pXHJcblxyXG4gICAgICByZXR1cm4gKHN0YXJ0RGF0ZSAmJiBlbmREYXRlICYmIGRhdGVUb0NoZWNrKVxyXG4gICAgICAgID8gc3RhcnREYXRlLmdldFRpbWUoKSA8PSBkYXRlVG9DaGVjay5nZXRUaW1lKCkgJiYgZW5kRGF0ZS5nZXRUaW1lKCkgPj0gZGF0ZVRvQ2hlY2suZ2V0VGltZSgpXHJcbiAgICAgICAgOiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2VcclxufVxyXG4iXX0=