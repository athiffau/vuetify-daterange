import '../../stylus/components/_date-picker-years.styl';
// Mixins
import Colorable from '../../mixins/colorable';
// Utils
import { createNativeLocaleFormatter } from './util';
import mixins from '../../util/mixins';
export default mixins(Colorable
/* @vue/component */
).extend({
    name: 'v-date-picker-years',
    props: {
        format: Function,
        locale: {
            type: String,
            default: 'en-us'
        },
        min: [Number, String],
        max: [Number, String],
        readonly: Boolean,
        value: [Number, String]
    },
    data() {
        return {
            defaultColor: 'primary'
        };
    },
    computed: {
        formatter() {
            return this.format || createNativeLocaleFormatter(this.locale, { year: 'numeric', timeZone: 'UTC' }, { length: 4 });
        }
    },
    mounted() {
        setTimeout(() => {
            const activeItem = this.$el.getElementsByClassName('active')[0];
            if (activeItem) {
                this.$el.scrollTop = activeItem.offsetTop - this.$el.offsetHeight / 2 + activeItem.offsetHeight / 2;
            }
            else {
                this.$el.scrollTop = this.$el.scrollHeight / 2 - this.$el.offsetHeight / 2;
            }
        });
    },
    methods: {
        genYearItem(year) {
            const formatted = this.formatter(`${year}`);
            const active = parseInt(this.value, 10) === year;
            const color = active && (this.color || 'primary');
            return this.$createElement('li', this.setTextColor(color, {
                key: year,
                'class': { active },
                on: {
                    click: () => this.$emit('input', year)
                }
            }), formatted);
        },
        genYearItems() {
            const children = [];
            const selectedYear = this.value ? parseInt(this.value, 10) : new Date().getFullYear();
            const maxYear = this.max ? parseInt(this.max, 10) : (selectedYear + 100);
            const minYear = Math.min(maxYear, this.min ? parseInt(this.min, 10) : (selectedYear - 100));
            for (let year = maxYear; year >= minYear; year--) {
                children.push(this.genYearItem(year));
            }
            return children;
        }
    },
    render() {
        return this.$createElement('ul', {
            staticClass: 'v-date-picker-years',
            ref: 'years'
        }, this.genYearItems());
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVQaWNrZXJZZWFycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZEYXRlUGlja2VyL1ZEYXRlUGlja2VyWWVhcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxpREFBaUQsQ0FBQTtBQUV4RCxTQUFTO0FBQ1QsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFFOUMsUUFBUTtBQUNSLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUNwRCxPQUFPLE1BQXNCLE1BQU0sbUJBQW1CLENBQUE7QUFXdEQsZUFBZSxNQUFNLENBT25CLFNBQVM7QUFDWCxvQkFBb0I7Q0FDbkIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUscUJBQXFCO0lBRTNCLEtBQUssRUFBRTtRQUNMLE1BQU0sRUFBRSxRQUEwRDtRQUNsRSxNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxPQUFPO1NBQ2pCO1FBQ0QsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUNyQixHQUFHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3JCLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7S0FDeEI7SUFFRCxJQUFJO1FBQ0YsT0FBTztZQUNMLFlBQVksRUFBRSxTQUFTO1NBQ3hCLENBQUE7SUFDSCxDQUFDO0lBRUQsUUFBUSxFQUFFO1FBQ1IsU0FBUztZQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNySCxDQUFDO0tBQ0Y7SUFFRCxPQUFPO1FBQ0wsVUFB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YXRlLXBpY2tlci15ZWFycy5zdHlsJ1xyXG5cclxuLy8gTWl4aW5zXHJcbmltcG9ydCBDb2xvcmFibGUgZnJvbSAnLi4vLi4vbWl4aW5zL2NvbG9yYWJsZSdcclxuXHJcbi8vIFV0aWxzXHJcbmltcG9ydCB7IGNyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlciB9IGZyb20gJy4vdXRpbCdcclxuaW1wb3J0IG1peGlucywgeyBFeHRyYWN0VnVlIH0gZnJvbSAnLi4vLi4vdXRpbC9taXhpbnMnXHJcblxyXG4vLyBUeXBlc1xyXG5pbXBvcnQgVnVlLCB7IFZOb2RlIH0gZnJvbSAndnVlJ1xyXG5pbXBvcnQgeyBEYXRlUGlja2VyRm9ybWF0dGVyIH0gZnJvbSAnLi91dGlsL2NyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlcidcclxuaW1wb3J0IHsgUHJvcFZhbGlkYXRvciB9IGZyb20gJ3Z1ZS90eXBlcy9vcHRpb25zJ1xyXG5cclxuaW50ZXJmYWNlIG9wdGlvbnMgZXh0ZW5kcyBWdWUge1xyXG4gICRlbDogSFRNTEVsZW1lbnRcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWl4aW5zPG9wdGlvbnMgJlxyXG4vKiBlc2xpbnQtZGlzYWJsZSBpbmRlbnQgKi9cclxuICBFeHRyYWN0VnVlPFtcclxuICAgIHR5cGVvZiBDb2xvcmFibGVcclxuICBdPlxyXG4vKiBlc2xpbnQtZW5hYmxlIGluZGVudCAqL1xyXG4+KFxyXG4gIENvbG9yYWJsZVxyXG4vKiBAdnVlL2NvbXBvbmVudCAqL1xyXG4pLmV4dGVuZCh7XHJcbiAgbmFtZTogJ3YtZGF0ZS1waWNrZXIteWVhcnMnLFxyXG5cclxuICBwcm9wczoge1xyXG4gICAgZm9ybWF0OiBGdW5jdGlvbiBhcyBQcm9wVmFsaWRhdG9yPERhdGVQaWNrZXJGb3JtYXR0ZXIgfCB1bmRlZmluZWQ+LFxyXG4gICAgbG9jYWxlOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogJ2VuLXVzJ1xyXG4gICAgfSxcclxuICAgIG1pbjogW051bWJlciwgU3RyaW5nXSxcclxuICAgIG1heDogW051bWJlciwgU3RyaW5nXSxcclxuICAgIHJlYWRvbmx5OiBCb29sZWFuLFxyXG4gICAgdmFsdWU6IFtOdW1iZXIsIFN0cmluZ11cclxuICB9LFxyXG5cclxuICBkYXRhICgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGRlZmF1bHRDb2xvcjogJ3ByaW1hcnknXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgY29tcHV0ZWQ6IHtcclxuICAgIGZvcm1hdHRlciAoKTogRGF0ZVBpY2tlckZvcm1hdHRlciB7XHJcbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdCB8fCBjcmVhdGVOYXRpdmVMb2NhbGVGb3JtYXR0ZXIodGhpcy5sb2NhbGUsIHsgeWVhcjogJ251bWVyaWMnLCB0aW1lWm9uZTogJ1VUQycgfSwgeyBsZW5ndGg6IDQgfSlcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBtb3VudGVkICgpIHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBjb25zdCBhY3RpdmVJdGVtID0gdGhpcy4kZWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWN0aXZlJylbMF1cclxuICAgICAgaWYgKGFjdGl2ZUl0ZW0pIHtcclxuICAgICAgICB0aGlzLiRlbC5zY3JvbGxUb3AgPSBhY3RpdmVJdGVtLm9mZnNldFRvcCAtIHRoaXMuJGVsLm9mZnNldEhlaWdodCAvIDIgKyBhY3RpdmVJdGVtLm9mZnNldEhlaWdodCAvIDJcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLiRlbC5zY3JvbGxUb3AgPSB0aGlzLiRlbC5zY3JvbGxIZWlnaHQgLyAyIC0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0IC8gMlxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0sXHJcblxyXG4gIG1ldGhvZHM6IHtcclxuICAgIGdlblllYXJJdGVtICh5ZWFyOiBudW1iZXIpOiBWTm9kZSB7XHJcbiAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IHRoaXMuZm9ybWF0dGVyKGAke3llYXJ9YClcclxuICAgICAgY29uc3QgYWN0aXZlID0gcGFyc2VJbnQodGhpcy52YWx1ZSwgMTApID09PSB5ZWFyXHJcbiAgICAgIGNvbnN0IGNvbG9yID0gYWN0aXZlICYmICh0aGlzLmNvbG9yIHx8ICdwcmltYXJ5JylcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdsaScsIHRoaXMuc2V0VGV4dENvbG9yKGNvbG9yLCB7XHJcbiAgICAgICAga2V5OiB5ZWFyLFxyXG4gICAgICAgICdjbGFzcyc6IHsgYWN0aXZlIH0sXHJcbiAgICAgICAgb246IHtcclxuICAgICAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLiRlbWl0KCdpbnB1dCcsIHllYXIpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KSwgZm9ybWF0dGVkKVxyXG4gICAgfSxcclxuXHJcbiAgICBnZW5ZZWFySXRlbXMgKCk6IFZOb2RlW10ge1xyXG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtdXHJcbiAgICAgIGNvbnN0IHNlbGVjdGVkWWVhciA9IHRoaXMudmFsdWUgPyBwYXJzZUludCh0aGlzLnZhbHVlLCAxMCkgOiBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKClcclxuICAgICAgY29uc3QgbWF4WWVhciA9IHRoaXMubWF4ID8gcGFyc2VJbnQodGhpcy5tYXgsIDEwKSA6IChzZWxlY3RlZFllYXIgKyAxMDApXHJcbiAgICAgIGNvbnN0IG1pblllYXIgPSBNYXRoLm1pbihtYXhZZWFyLCB0aGlzLm1pbiA/IHBhcnNlSW50KHRoaXMubWluLCAxMCkgOiAoc2VsZWN0ZWRZZWFyIC0gMTAwKSlcclxuXHJcbiAgICAgIGZvciAobGV0IHllYXIgPSBtYXhZZWFyOyB5ZWFyID49IG1pblllYXI7IHllYXItLSkge1xyXG4gICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5nZW5ZZWFySXRlbSh5ZWFyKSlcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGNoaWxkcmVuXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgcmVuZGVyICgpOiBWTm9kZSB7XHJcbiAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgndWwnLCB7XHJcbiAgICAgIHN0YXRpY0NsYXNzOiAndi1kYXRlLXBpY2tlci15ZWFycycsXHJcbiAgICAgIHJlZjogJ3llYXJzJ1xyXG4gICAgfSwgdGhpcy5nZW5ZZWFySXRlbXMoKSlcclxuICB9XHJcbn0pXHJcbiJdfQ==