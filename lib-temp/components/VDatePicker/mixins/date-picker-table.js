import '../../../stylus/components/_date-picker-table.styl';
// Directives
import Touch from '../../../directives/touch';
// Mixins
import Colorable from '../../../mixins/colorable';
import Themeable from '../../../mixins/themeable';
// Utils
import isDateAllowed from '../util/isDateAllowed';
import isDateInRange, { isDateInHoverRange, isHoverAfterStartDate, isHoverBeforeStartDate } from '../util/isDateInRange';
import mixins from '../../../util/mixins';
export default mixins(Colorable, Themeable
/* @vue/component */
).extend({
    directives: { Touch },
    props: {
        allowedDates: Function,
        current: String,
        disabled: Boolean,
        format: Function,
        events: {
            type: [Array, Function, Object],
            default: () => null
        },
        eventColor: {
            type: [Array, Function, Object, String],
            default: () => 'warning'
        },
        hoverLink: {
            type: String,
            default: ''
        },
        locale: {
            type: String,
            default: 'en-us'
        },
        min: String,
        max: String,
        range: Boolean,
        readonly: Boolean,
        scrollable: Boolean,
        tableDate: {
            type: String,
            required: true
        },
        value: [String, Array],
        viewing: String
    },
    data: () => ({
        isReversing: false,
        hovering: ''
    }),
    computed: {
        computedTransition() {
            return (this.isReversing === !this.$vuetify.rtl) ? 'tab-reverse-transition' : 'tab-transition';
        },
        displayedMonth() {
            return Number(this.tableDate.split('-')[1]) - 1;
        },
        displayedYear() {
            return Number(this.tableDate.split('-')[0]);
        }
    },
    watch: {
        tableDate(newVal, oldVal) {
            this.isReversing = newVal < oldVal;
        },
        hovering(value) {
            this.$emit('hover', value);
        }
    },
    methods: {
        genButtonClasses(isAllowed, isFloating, isSelected, isCurrent, isRange, isHover, isRangeStart, isRangeEnd) {
            return {
                'v-btn--range': isRange,
                'v-btn--range-hover': isRange && isHover,
                'v-btn--range-start': isRange && isRangeStart,
                'v-btn--range-end': isRange && isRangeEnd,
                'v-btn--active': isSelected,
                'v-btn--flat': !isSelected,
                'v-btn--icon': isSelected && isAllowed && isFloating,
                'v-btn--floating': isFloating,
                'v-btn--depressed': !isFloating && isSelected,
                'v-btn--disabled': !isAllowed || (this.disabled && isSelected),
                'v-btn--outline': isCurrent && !isSelected,
                ...this.themeClasses
            };
        },
        genButtonEvents(value, isAllowed, mouseEventType) {
            if (this.disabled)
                return undefined;
            return {
                click: () => {
                    isAllowed && !this.readonly && this.$emit('input', value);
                    this.$emit(`click:${mouseEventType}`, value);
                },
                dblclick: () => this.$emit(`dblclick:${mouseEventType}`, value),
                mouseover: () => {
                    this.hovering = value;
                },
                mouseleave: () => {
                    this.hovering = '';
                }
            };
        },
        genButton(value, isFloating, mouseEventType, formatter) {
            const isAllowed = isDateAllowed(value, this.min, this.max, this.allowedDates);
            const isSelected = value === this.value || (Array.isArray(this.value) && this.value.indexOf(value) !== -1);
            const isCurrent = value === this.current;
            const isHover = value === this.hovering;
            const isRange = this.range && this.value.length > 0;
            const inView = isRange ? mouseEventType === 'month' && formatter(this.viewing) === formatter(value) : false;
            const isInRange = isDateInRange(value, this.value);
            const isRangeEnd = (isRange && (value === this.value[1] ||
                (!isInRange && ((value === this.value[0] && isHoverBeforeStartDate(this.value[0], this.hoverLink)) ||
                    (value === this.hovering && isHoverAfterStartDate(this.value[0], this.hoverLink))))));
            const isRangeStart = isRange && !isRangeEnd && (value === this.value[0] ||
                (value === this.hovering && isHoverBeforeStartDate(this.value[0], this.hoverLink)));
            const setColor = isSelected || isRange || inView ? this.setBackgroundColor : this.setTextColor;
            const color = this.getFinalColor(value, (isSelected || isCurrent || inView) && (this.color || 'accent'));
            return this.$createElement('button', setColor(color, {
                staticClass: 'v-btn',
                'class': this.genButtonClasses(isAllowed, isFloating, isSelected || inView, isCurrent, isRange, isHover, isRangeStart, isRangeEnd),
                attrs: {
                    type: 'button'
                },
                props: {
                    isHovering: false
                },
                domProps: {
                    disabled: this.disabled || !isAllowed
                },
                on: this.genButtonEvents(value, isAllowed, mouseEventType)
            }), [
                this.$createElement('div', {
                    staticClass: 'v-btn__content'
                }, [formatter(value)]),
                this.genEvents(value)
            ]);
        },
        getFinalColor(date, color) {
            const colorInRange = Array.isArray(this.value) && isDateInRange(date, this.value);
            const colorInRangeHover = Array.isArray(this.value) && (this.value.length === 1) && (typeof this.value[0] === 'string') && isDateInHoverRange(date, this.value[0], this.hoverLink);
            const colorRangeNode = Array.isArray(this.value) && (this.value.indexOf(date) === 0 || date === this.value[this.value.length - 1]);
            return colorRangeNode ? `${this.color} accent darken-4` : colorInRange ? `${this.color} accent darken-2` : colorInRangeHover ? `${this.color} accent darken-3` : color;
        },
        getEventColors(date) {
            const arrayize = (v) => Array.isArray(v) ? v : [v];
            let eventData;
            let eventColors = [];
            if (Array.isArray(this.events)) {
                eventData = this.events.includes(date);
            }
            else if (this.events instanceof Function) {
                eventData = this.events(date) || false;
            }
            else if (this.events) {
                eventData = this.events[date] || false;
            }
            else {
                eventData = false;
            }
            if (!eventData) {
                return [];
            }
            else if (eventData !== true) {
                eventColors = arrayize(eventData);
            }
            else if (typeof this.eventColor === 'string') {
                eventColors = [this.eventColor];
            }
            else if (typeof this.eventColor === 'function') {
                eventColors = arrayize(this.eventColor(date));
            }
            else if (Array.isArray(this.eventColor)) {
                eventColors = this.eventColor;
            }
            else {
                eventColors = arrayize(this.eventColor[date]);
            }
            return eventColors.filter(v => v);
        },
        genEvents(date) {
            const eventColors = this.getEventColors(date);
            return eventColors.length ? this.$createElement('div', {
                staticClass: 'v-date-picker-table__events'
            }, eventColors.map(color => this.$createElement('div', this.setBackgroundColor(color)))) : null;
        },
        wheel(e, calculateTableDate) {
            e.preventDefault();
            this.$emit('tableDate', calculateTableDate(e.deltaY));
        },
        touch(value, calculateTableDate) {
            this.$emit('tableDate', calculateTableDate(value));
        },
        genTable(staticClass, children, calculateTableDate) {
            const transition = this.$createElement('transition', {
                props: { name: this.computedTransition }
            }, [this.$createElement('table', { key: this.tableDate }, children)]);
            const touchDirective = {
                name: 'touch',
                value: {
                    left: (e) => (e.offsetX < -15) && this.touch(1, calculateTableDate),
                    right: (e) => (e.offsetX > 15) && this.touch(-1, calculateTableDate)
                }
            };
            return this.$createElement('div', {
                staticClass,
                class: {
                    'v-date-picker-table--disabled': this.disabled,
                    ...this.themeClasses
                },
                on: (!this.disabled && this.scrollable) ? {
                    wheel: (e) => this.wheel(e, calculateTableDate)
                } : undefined,
                directives: [touchDirective]
            }, [transition]);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,