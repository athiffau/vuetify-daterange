import '../../../stylus/components/_date-picker-table.styl';
// Directives
import Touch from '../../../directives/touch';
// Mixins
import Colorable from '../../../mixins/colorable';
import Themeable from '../../../mixins/themeable';
// Utils
import isDateAllowed from '../util/isDateAllowed';
import isDateInRange, { isDateInHoverRange, isHoverAfterStartDate, isHoverBeforeStartDate } from '../util/isDateInRange';
import mixins from '../../../util/mixins';
export default mixins(Colorable, Themeable
/* @vue/component */
).extend({
    directives: { Touch },
    props: {
        allowedDates: Function,
        current: String,
        disabled: Boolean,
        format: Function,
        events: {
            type: [Array, Function, Object],
            default: () => null
        },
        eventColor: {
            type: [Array, Function, Object, String],
            default: () => 'warning'
        },
        hoverLink: {
            type: String,
            default: ''
        },
        locale: {
            type: String,
            default: 'en-us'
        },
        min: String,
        max: String,
        range: Boolean,
        readonly: Boolean,
        scrollable: Boolean,
        tableDate: {
            type: String,
            required: true
        },
        value: [String, Array],
        viewing: String
    },
    data: () => ({
        isReversing: false,
        hovering: ''
    }),
    computed: {
        computedTransition() {
            return (this.isReversing === !this.$vuetify.rtl) ? 'tab-reverse-transition' : 'tab-transition';
        },
        displayedMonth() {
            return Number(this.tableDate.split('-')[1]) - 1;
        },
        displayedYear() {
            return Number(this.tableDate.split('-')[0]);
        }
    },
    watch: {
        tableDate(newVal, oldVal) {
            this.isReversing = newVal < oldVal;
        },
        hovering(value) {
            this.$emit('hover', value);
        }
    },
    methods: {
        genButtonClasses(isAllowed, isFloating, isSelected, isCurrent, isRange, isHover, isRangeStart, isRangeEnd) {
            return {
                'v-btn--range': isRange,
                'v-btn--range-hover': isRange && isHover,
                'v-btn--range-start': isRange && isRangeStart,
                'v-btn--range-end': isRange && isRangeEnd,
                'v-btn--active': isSelected,
                'v-btn--flat': !isSelected,
                'v-btn--icon': isSelected && isAllowed && isFloating,
                'v-btn--floating': isFloating,
                'v-btn--depressed': !isFloating && isSelected,
                'v-btn--disabled': !isAllowed || (this.disabled && isSelected),
                'v-btn--outline': isCurrent && !isSelected,
                ...this.themeClasses
            };
        },
        genButtonEvents(value, isAllowed, mouseEventType) {
            if (this.disabled)
                return undefined;
            return {
                click: () => {
                    isAllowed && !this.readonly && this.$emit('input', value);
                    this.$emit(`click:${mouseEventType}`, value);
                },
                dblclick: () => this.$emit(`dblclick:${mouseEventType}`, value),
                mouseover: () => {
                    this.hovering = value;
                },
                mouseleave: () => {
                    this.hovering = '';
                }
            };
        },
        genButton(value, isFloating, mouseEventType, formatter) {
            const isAllowed = isDateAllowed(value, this.min, this.max, this.allowedDates);
            const isSelected = value === this.value || (Array.isArray(this.value) && this.value.indexOf(value) !== -1);
            const isCurrent = value === this.current;
            const inView = mouseEventType === 'month' && formatter(this.viewing) === formatter(value);
            const isHover = value === this.hovering;
            const isRange = this.range && this.value.length > 0;
            const isInRange = isDateInRange(value, this.value);
            const isRangeEnd = (isRange && (value === this.value[1] ||
                (!isInRange && ((value === this.value[0] && isHoverBeforeStartDate(this.value[0], this.hoverLink)) ||
                    (value === this.hovering && isHoverAfterStartDate(this.value[0], this.hoverLink))))));
            const isRangeStart = isRange && !isRangeEnd && (value === this.value[0] ||
                (value === this.hovering && isHoverBeforeStartDate(this.value[0], this.hoverLink)));
            const setColor = isSelected || isRange || inView ? this.setBackgroundColor : this.setTextColor;
            const color = this.getFinalColor(value, (isSelected || isCurrent || inView) && (this.color || 'accent'));
            return this.$createElement('button', setColor(color, {
                staticClass: 'v-btn',
                'class': this.genButtonClasses(isAllowed, isFloating, isSelected || inView, isCurrent, isRange, isHover, isRangeStart, isRangeEnd),
                attrs: {
                    type: 'button'
                },
                props: {
                    isHovering: false
                },
                domProps: {
                    disabled: this.disabled || !isAllowed
                },
                on: this.genButtonEvents(value, isAllowed, mouseEventType)
            }), [
                this.$createElement('div', {
                    staticClass: 'v-btn__content'
                }, [formatter(value)]),
                this.genEvents(value)
            ]);
        },
        getFinalColor(date, color) {
            const colorInRange = Array.isArray(this.value) && isDateInRange(date, this.value);
            const colorInRangeHover = Array.isArray(this.value) && (this.value.length === 1) && (typeof this.value[0] === 'string') && isDateInHoverRange(date, this.value[0], this.hoverLink);
            const colorRangeNode = Array.isArray(this.value) && (this.value.indexOf(date) === 0 || date === this.value[this.value.length - 1]);
            return colorRangeNode ? `${this.color} accent darken-4` : colorInRange ? `${this.color} accent darken-2` : colorInRangeHover ? `${this.color} accent darken-3` : color;
        },
        getEventColors(date) {
            const arrayize = (v) => Array.isArray(v) ? v : [v];
            let eventData;
            let eventColors = [];
            if (Array.isArray(this.events)) {
                eventData = this.events.includes(date);
            }
            else if (this.events instanceof Function) {
                eventData = this.events(date) || false;
            }
            else if (this.events) {
                eventData = this.events[date] || false;
            }
            else {
                eventData = false;
            }
            if (!eventData) {
                return [];
            }
            else if (eventData !== true) {
                eventColors = arrayize(eventData);
            }
            else if (typeof this.eventColor === 'string') {
                eventColors = [this.eventColor];
            }
            else if (typeof this.eventColor === 'function') {
                eventColors = arrayize(this.eventColor(date));
            }
            else if (Array.isArray(this.eventColor)) {
                eventColors = this.eventColor;
            }
            else {
                eventColors = arrayize(this.eventColor[date]);
            }
            return eventColors.filter(v => v);
        },
        genEvents(date) {
            const eventColors = this.getEventColors(date);
            return eventColors.length ? this.$createElement('div', {
                staticClass: 'v-date-picker-table__events'
            }, eventColors.map(color => this.$createElement('div', this.setBackgroundColor(color)))) : null;
        },
        wheel(e, calculateTableDate) {
            e.preventDefault();
            this.$emit('tableDate', calculateTableDate(e.deltaY));
        },
        touch(value, calculateTableDate) {
            this.$emit('tableDate', calculateTableDate(value));
        },
        genTable(staticClass, children, calculateTableDate) {
            const transition = this.$createElement('transition', {
                props: { name: this.computedTransition }
            }, [this.$createElement('table', { key: this.tableDate }, children)]);
            const touchDirective = {
                name: 'touch',
                value: {
                    left: (e) => (e.offsetX < -15) && this.touch(1, calculateTableDate),
                    right: (e) => (e.offsetX > 15) && this.touch(-1, calculateTableDate)
                }
            };
            return this.$createElement('div', {
                staticClass,
                class: {
                    'v-date-picker-table--disabled': this.disabled,
                    ...this.themeClasses
                },
                on: (!this.disabled && this.scrollable) ? {
                    wheel: (e) => this.wheel(e, calculateTableDate)
                } : undefined,
                directives: [touchDirective]
            }, [transition]);
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1waWNrZXItdGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WRGF0ZVBpY2tlci9taXhpbnMvZGF0ZS1waWNrZXItdGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxvREFBb0QsQ0FBQTtBQUUzRCxhQUFhO0FBQ2IsT0FBTyxLQUF1QixNQUFNLDJCQUEyQixDQUFBO0FBRS9ELFNBQVM7QUFDVCxPQUFPLFNBQVMsTUFBTSwyQkFBMkIsQ0FBQTtBQUNqRCxPQUFPLFNBQVMsTUFBTSwyQkFBMkIsQ0FBQTtBQUVqRCxRQUFRO0FBQ1IsT0FBTyxhQUFzQyxNQUFNLHVCQUF1QixDQUFBO0FBQzFFLE9BQU8sYUFBYSxFQUFFLEVBQUUsa0JBQWtCLEVBQUUscUJBQXFCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUN4SCxPQUFPLE1BQU0sTUFBTSxzQkFBc0IsQ0FBQTtBQVd6QyxlQUFlLE1BQU0sQ0FDbkIsU0FBUyxFQUNULFNBQVM7QUFDWCxvQkFBb0I7Q0FDbkIsQ0FBQyxNQUFNLENBQUM7SUFDUCxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUU7SUFFckIsS0FBSyxFQUFFO1FBQ0wsWUFBWSxFQUFFLFFBQTBEO1FBQ3hFLE9BQU8sRUFBRSxNQUFNO1FBQ2YsUUFBUSxFQUFFLE9BQU87UUFDakIsTUFBTSxFQUFFLFFBQTBEO1FBQ2xFLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDO1lBQy9CLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO1NBQ2dCO1FBQ3JDLFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztZQUN2QyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUztTQUNnQjtRQUMxQyxTQUFTLEVB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QyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUM7b0JBQ2pGLEtBQUssRUFBRSxDQUFDLENBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUM7aUJBQ25GO2FBQ0YsQ0FBQTtZQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUU7Z0JBQ2hDLFdBQVc7Z0JBQ1gsS0FBSyxFQUFFO29CQUNMLCtCQUErQixFQUFFLElBQUksQ0FBQyxRQUFRO29CQUM5QyxHQUFHLElBQUksQ0FBQyxZQUFZO2lCQUNyQjtnQkFDRCxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDeEMsS0FBSyxFQUFFLENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQztpQkFDNUQsQ0FBQyxDQUFDLENBQUMsU0FBUztnQkFDYixVQUFVLEVBQUUsQ0FBQyxjQUFjLENBQUM7YUFDN0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7UUFDbEIsQ0FBQztLQUNGO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICcuLi8uLi8uLi9zdHlsdXMvY29tcG9uZW50cy9fZGF0ZS1waWNrZXItdGFibGUuc3R5bCdcclxuXHJcbi8vIERpcmVjdGl2ZXNcclxuaW1wb3J0IFRvdWNoLCB7IFRvdWNoV3JhcHBlciB9IGZyb20gJy4uLy4uLy4uL2RpcmVjdGl2ZXMvdG91Y2gnXHJcblxyXG4vLyBNaXhpbnNcclxuaW1wb3J0IENvbG9yYWJsZSBmcm9tICcuLi8uLi8uLi9taXhpbnMvY29sb3JhYmxlJ1xyXG5pbXBvcnQgVGhlbWVhYmxlIGZyb20gJy4uLy4uLy4uL21peGlucy90aGVtZWFibGUnXHJcblxyXG4vLyBVdGlsc1xyXG5pbXBvcnQgaXNEYXRlQWxsb3dlZCwgeyBBbGxvd2VkRGF0ZUZ1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0RhdGVBbGxvd2VkJ1xyXG5pbXBvcnQgaXNEYXRlSW5SYW5nZSwgeyBpc0RhdGVJbkhvdmVyUmFuZ2UsIGlzSG92ZXJBZnRlclN0YXJ0RGF0ZSwgaXNIb3ZlckJlZm9yZVN0YXJ0RGF0ZSB9IGZyb20gJy4uL3V0aWwvaXNEYXRlSW5SYW5nZSdcclxuaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi8uLi91dGlsL21peGlucydcclxuXHJcbi8vIFR5cGVzXHJcbmltcG9ydCB7IFZOb2RlQ2hpbGRyZW4gfSBmcm9tICd2dWUnXHJcbmltcG9ydCB7IFByb3BWYWxpZGF0b3IgfSBmcm9tICd2dWUvdHlwZXMvb3B0aW9ucydcclxuaW1wb3J0IHsgRGF0ZVBpY2tlckZvcm1hdHRlciB9IGZyb20gJy4uL3V0aWwvY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyJ1xyXG5pbXBvcnQgeyBEYXRlRXZlbnRzLCBEYXRlRXZlbnRDb2xvcnMsIERhdGVFdmVudENvbG9yVmFsdWUgfSBmcm9tICcuLi9WRGF0ZVBpY2tlcidcclxuLy8gaW1wb3J0IHsgZW1pdCB9IGZyb20gJ2NsdXN0ZXInO1xyXG5cclxudHlwZSBDYWxjdWxhdGVUYWJsZURhdGVGdW5jdGlvbiA9ICh2OiBudW1iZXIpID0+IHN0cmluZ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWl4aW5zKFxyXG4gIENvbG9yYWJsZSxcclxuICBUaGVtZWFibGVcclxuLyogQHZ1ZS9jb21wb25lbnQgKi9cclxuKS5leHRlbmQoe1xyXG4gIGRpcmVjdGl2ZXM6IHsgVG91Y2ggfSxcclxuXHJcbiAgcHJvcHM6IHtcclxuICAgIGFsbG93ZWREYXRlczogRnVuY3Rpb24gYXMgUHJvcFZhbGlkYXRvcjxBbGxvd2VkRGF0ZUZ1bmN0aW9uIHwgdW5kZWZpbmVkPixcclxuICAgIGN1cnJlbnQ6IFN0cmluZyxcclxuICAgIGRpc2FibGVkOiBCb29sZWFuLFxyXG4gICAgZm9ybWF0OiBGdW5jdGlvbiBhcyBQcm9wVmFsaWRhdG9yPERhdGVQaWNrZXJGb3JtYXR0ZXIgfCB1bmRlZmluZWQ+LFxyXG4gICAgZXZlbnRzOiB7XHJcbiAgICAgIHR5cGU6IFtBcnJheSwgRnVuY3Rpb24sIE9iamVjdF0sXHJcbiAgICAgIGRlZmF1bHQ6ICgpID0+IG51bGxcclxuICAgIH0gYXMgYW55IGFzIFByb3BWYWxpZGF0b3I8RGF0ZUV2ZW50cz4sXHJcbiAgICBldmVudENvbG9yOiB7XHJcbiAgICAgIHR5cGU6IFtBcnJheSwgRnVuY3Rpb24sIE9iamVjdCwgU3RyaW5nXSxcclxuICAgICAgZGVmYXVsdDogKCkgPT4gJ3dhcm5pbmcnXHJcbiAgICB9IGFzIGFueSBhcyBQcm9wVmFsaWRhdG9yPERhdGVFdmVudENvbG9ycz4sXHJcbiAgICBob3Zlckxpbms6IHtcclxuICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICBkZWZhdWx0OiAnJ1xyXG4gICAgfSxcclxuICAgIGxvY2FsZToge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIGRlZmF1bHQ6ICdlbi11cydcclxuICAgIH0sXHJcbiAgICBtaW46IFN0cmluZyxcclxuICAgIG1heDogU3RyaW5nLFxyXG4gICAgcmFuZ2U6IEJvb2xlYW4sXHJcbiAgICByZWFkb25seTogQm9vbGVhbixcclxuICAgIHNjcm9sbGFibGU6IEJvb2xlYW4sXHJcbiAgICB0YWJsZURhdGU6IHtcclxuICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICByZXF1aXJlZDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHZhbHVlOiBbU3RyaW5nLCBBcnJheV0sXHJcbiAgICB2aWV3aW5nOiBTdHJpbmdcclxuICB9LFxyXG5cclxuICBkYXRhOiAoKSA9PiAoe1xyXG4gICAgaXNSZXZlcnNpbmc6IGZhbHNlLFxyXG4gICAgaG92ZXJpbmc6ICcnXHJcbiAgfSksXHJcblxyXG4gIGNvbXB1dGVkOiB7XHJcbiAgICBjb21wdXRlZFRyYW5zaXRpb24gKCk6IHN0cmluZyB7XHJcbiAgICAgIHJldHVybiAodGhpcy5pc1JldmVyc2luZyA9PT0gIXRoaXMuJHZ1ZXRpZnkucnRsKSA/ICd0YWItcmV2ZXJzZS10cmFuc2l0aW9uJyA6ICd0YWItdHJhbnNpdGlvbidcclxuICAgIH0sXHJcbiAgICBkaXNwbGF5ZWRNb250aCAoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnRhYmxlRGF0ZS5zcGxpdCgnLScpWzFdKSAtIDFcclxuICAgIH0sXHJcbiAgICBkaXNwbGF5ZWRZZWFyICgpOiBudW1iZXIge1xyXG4gICAgICByZXR1cm4gTnVtYmVyKHRoaXMudGFibGVEYXRlLnNwbGl0KCctJylbMF0pXHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgd2F0Y2g6IHtcclxuICAgIHRhYmxlRGF0ZSAobmV3VmFsOiBzdHJpbmcsIG9sZFZhbDogc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMuaXNSZXZlcnNpbmcgPSBuZXdWYWwgPCBvbGRWYWxcclxuICAgIH0sXHJcbiAgICBob3ZlcmluZyAodmFsdWUpIHtcclxuICAgICAgdGhpcy4kZW1pdCgnaG92ZXInLCB2YWx1ZSlcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBnZW5CdXR0b25DbGFzc2VzIChcclxuICAgICAgaXNBbGxvd2VkOiBib29sZWFuLFxyXG4gICAgICBpc0Zsb2F0aW5nOiBib29sZWFuLFxyXG4gICAgICBpc1NlbGVjdGVkOiBib29sZWFuLFxyXG4gICAgICBpc0N1cnJlbnQ6IGJvb2xlYW4sXHJcbiAgICAgIGlzUmFuZ2U6IGJvb2xlYW4sXHJcbiAgICAgIGlzSG92ZXI6IGJvb2xlYW4sXHJcbiAgICAgIGlzUmFuZ2VTdGFydDogYm9vbGVhbixcclxuICAgICAgaXNSYW5nZUVuZDogYm9vbGVhblxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgJ3YtYnRuLS1yYW5nZSc6IGlzUmFuZ2UsXHJcbiAgICAgICAgJ3YtYnRuLS1yYW5nZS1ob3Zlcic6IGlzUmFuZ2UgJiYgaXNIb3ZlcixcclxuICAgICAgICAndi1idG4tLXJhbmdlLXN0YXJ0JzogaXNSYW5nZSAmJiBpc1JhbmdlU3RhcnQsXHJcbiAgICAgICAgJ3YtYnRuLS1yYW5nZS1lbmQnOiBpc1JhbmdlICYmIGlzUmFuZ2VFbmQsXHJcbiAgICAgICAgJ3YtYnRuLS1hY3RpdmUnOiBpc1NlbGVjdGVkLFxyXG4gICAgICAgICd2LWJ0bi0tZmxhdCc6ICFpc1NlbGVjdGVkLFxyXG4gICAgICAgICd2LWJ0bi0taWNvbic6IGlzU2VsZWN0ZWQgJiYgaXNBbGxvd2VkICYmIGlzRmxvYXRpbmcsXHJcbiAgICAgICAgJ3YtYnRuLS1mbG9hdGluZyc6IGlzRmxvYXRpbmcsXHJcbiAgICAgICAgJ3YtYnRuLS1kZXByZXNzZWQnOiAhaXNGbG9hdGluZyAmJiBpc1NlbGVjdGVkLFxyXG4gICAgICAgICd2LWJ0bi0tZGlzYWJsZWQnOiAhaXNBbGxvd2VkIHx8ICh0aGlzLmRpc2FibGVkICYmIGlzU2VsZWN0ZWQpLFxyXG4gICAgICAgICd2LWJ0bi0tb3V0bGluZSc6IGlzQ3VycmVudCAmJiAhaXNTZWxlY3RlZCxcclxuICAgICAgICAuLi50aGlzLnRoZW1lQ2xhc3Nlc1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZ2VuQnV0dG9uRXZlbnRzICh2YWx1ZTogc3RyaW5nLCBpc0FsbG93ZWQ6IGJvb2xlYW4sIG1vdXNlRXZlbnRUeXBlOiBzdHJpbmcpIHtcclxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHJldHVybiB1bmRlZmluZWRcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgY2xpY2s6ICgpID0+IHtcclxuICAgICAgICAgIGlzQWxsb3dlZCAmJiAhdGhpcy5yZWFkb25seSAmJiB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbHVlKVxyXG4gICAgICAgICAgdGhpcy4kZW1pdChgY2xpY2s6JHttb3VzZUV2ZW50VHlwZX1gLCB2YWx1ZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRibGNsaWNrOiAoKSA9PiB0aGlzLiRlbWl0KGBkYmxjbGljazoke21vdXNlRXZlbnRUeXBlfWAsIHZhbHVlKSxcclxuICAgICAgICBtb3VzZW92ZXI6ICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuaG92ZXJpbmcgPSB2YWx1ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW91c2VsZWF2ZTogKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5ob3ZlcmluZyA9ICcnXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgZ2VuQnV0dG9uICh2YWx1ZTogc3RyaW5nLCBpc0Zsb2F0aW5nOiBib29sZWFuLCBtb3VzZUV2ZW50VHlwZTogc3RyaW5nLCBmb3JtYXR0ZXI6IERhdGVQaWNrZXJGb3JtYXR0ZXIpIHtcclxuICAgICAgY29uc3QgaXNBbGxvd2VkID0gaXNEYXRlQWxsb3dlZCh2YWx1ZSwgdGhpcy5taW4sIHRoaXMubWF4LCB0aGlzLmFsbG93ZWREYXRlcylcclxuICAgICAgY29uc3QgaXNTZWxlY3RlZCA9IHZhbHVlID09PSB0aGlzLnZhbHVlIHx8IChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpICYmIHRoaXMudmFsdWUuaW5kZXhPZih2YWx1ZSkgIT09IC0xKVxyXG4gICAgICBjb25zdCBpc0N1cnJlbnQgPSB2YWx1ZSA9PT0gdGhpcy5jdXJyZW50XHJcbiAgICAgIGNvbnN0IGluVmlldyA9IG1vdXNlRXZlbnRUeXBlID09PSAnbW9udGgnICYmIGZvcm1hdHRlcih0aGlzLnZpZXdpbmcpID09PSBmb3JtYXR0ZXIodmFsdWUpXHJcbiAgICAgIGNvbnN0IGlzSG92ZXIgPSB2YWx1ZSA9PT0gdGhpcy5ob3ZlcmluZ1xyXG4gICAgICBjb25zdCBpc1JhbmdlID0gdGhpcy5yYW5nZSAmJiB0aGlzLnZhbHVlLmxlbmd0aCA+IDBcclxuICAgICAgY29uc3QgaXNJblJhbmdlID0gaXNEYXRlSW5SYW5nZSh2YWx1ZSwgdGhpcy52YWx1ZSlcclxuICAgICAgY29uc3QgaXNSYW5nZUVuZCA9IChpc1JhbmdlICYmIChcclxuICAgICAgICB2YWx1ZSA9PT0gdGhpcy52YWx1ZVsxXSB8fFxyXG4gICAgICAgICghaXNJblJhbmdlICYmIChcclxuICAgICAgICAgICh2YWx1ZSA9PT0gdGhpcy52YWx1ZVswXSAmJiBpc0hvdmVyQmVmb3JlU3RhcnREYXRlKHRoaXMudmFsdWVbMF0sIHRoaXMuaG92ZXJMaW5rKSkgfHxcclxuICAgICAgICAgICh2YWx1ZSA9PT0gdGhpcy5ob3ZlcmluZyAmJiBpc0hvdmVyQWZ0ZXJTdGFydERhdGUodGhpcy52YWx1ZVswXSwgdGhpcy5ob3ZlckxpbmspKVxyXG4gICAgICAgICkpXHJcbiAgICAgICkpXHJcbiAgICAgIGNvbnN0IGlzUmFuZ2VTdGFydCA9IGlzUmFuZ2UgJiYgIWlzUmFuZ2VFbmQgJiYgKFxyXG4gICAgICAgIHZhbHVlID09PSB0aGlzLnZhbHVlWzBdIHx8XHJcbiAgICAgICAgKHZhbHVlID09PSB0aGlzLmhvdmVyaW5nICYmIGlzSG92ZXJCZWZvcmVTdGFydERhdGUodGhpcy52YWx1ZVswXSwgdGhpcy5ob3ZlckxpbmspKVxyXG4gICAgICApXHJcbiAgICAgIGNvbnN0IHNldENvbG9yID0gaXNTZWxlY3RlZCB8fCBpc1JhbmdlIHx8IGluVmlldyA/IHRoaXMuc2V0QmFja2dyb3VuZENvbG9yIDogdGhpcy5zZXRUZXh0Q29sb3JcclxuXHJcbiAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5nZXRGaW5hbENvbG9yKHZhbHVlLCAoaXNTZWxlY3RlZCB8fCBpc0N1cnJlbnQgfHwgaW5WaWV3KSAmJiAodGhpcy5jb2xvciB8fCAnYWNjZW50JykpXHJcblxyXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnYnV0dG9uJywgc2V0Q29sb3IoY29sb3IsIHtcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3YtYnRuJyxcclxuICAgICAgICAnY2xhc3MnOiB0aGlzLmdlbkJ1dHRvbkNsYXNzZXMoaXNBbGxvd2VkLCBpc0Zsb2F0aW5nLCBpc1NlbGVjdGVkIHx8IGluVmlldywgaXNDdXJyZW50LCBpc1JhbmdlLCBpc0hvdmVyLCBpc1JhbmdlU3RhcnQsIGlzUmFuZ2VFbmQpLFxyXG4gICAgICAgIGF0dHJzOiB7XHJcbiAgICAgICAgICB0eXBlOiAnYnV0dG9uJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgIGlzSG92ZXJpbmc6IGZhbHNlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkb21Qcm9wczoge1xyXG4gICAgICAgICAgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWQgfHwgIWlzQWxsb3dlZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb246IHRoaXMuZ2VuQnV0dG9uRXZlbnRzKHZhbHVlLCBpc0FsbG93ZWQsIG1vdXNlRXZlbnRUeXBlKVxyXG4gICAgICB9KSwgW1xyXG4gICAgICAgIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcclxuICAgICAgICAgIHN0YXRpY0NsYXNzOiAndi1idG5fX2NvbnRlbnQnXHJcbiAgICAgICAgfSwgW2Zvcm1hdHRlcih2YWx1ZSldKSxcclxuICAgICAgICB0aGlzLmdlbkV2ZW50cyh2YWx1ZSlcclxuICAgICAgXSlcclxuICAgIH0sXHJcbiAgICBnZXRGaW5hbENvbG9yIChkYXRlOiBzdHJpbmcsIGNvbG9yOiBzdHJpbmcgfCBmYWxzZSkge1xyXG4gICAgICBjb25zdCBjb2xvckluUmFuZ2UgPSBBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpICYmIGlzRGF0ZUluUmFuZ2UoZGF0ZSwgdGhpcy52YWx1ZSlcclxuICAgICAgY29uc3QgY29sb3JJblJhbmdlSG92ZXIgPSBBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpICYmICh0aGlzLnZhbHVlLmxlbmd0aCA9PT0gMSkgJiYgKHR5cGVvZiB0aGlzLnZhbHVlWzBdID09PSAnc3RyaW5nJykgJiYgaXNEYXRlSW5Ib3ZlclJhbmdlKGRhdGUsIHRoaXMudmFsdWVbMF0sIHRoaXMuaG92ZXJMaW5rKVxyXG4gICAgICBjb25zdCBjb2xvclJhbmdlTm9kZSA9IEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkgJiYgKHRoaXMudmFsdWUuaW5kZXhPZihkYXRlKSA9PT0gMCB8fCBkYXRlID09PSB0aGlzLnZhbHVlW3RoaXMudmFsdWUubGVuZ3RoIC0gMV0pXHJcbiAgICAgIHJldHVybiBjb2xvclJhbmdlTm9kZSA/IGAke3RoaXMuY29sb3J9IGFjY2VudCBkYXJrZW4tNGAgOiBjb2xvckluUmFuZ2UgPyBgJHt0aGlzLmNvbG9yfSBhY2NlbnQgZGFya2VuLTJgIDogY29sb3JJblJhbmdlSG92ZXIgPyBgJHt0aGlzLmNvbG9yfSBhY2NlbnQgZGFya2VuLTNgIDogY29sb3JcclxuICAgIH0sXHJcbiAgICBnZXRFdmVudENvbG9ycyAoZGF0ZTogc3RyaW5nKSB7XHJcbiAgICAgIGNvbnN0IGFycmF5aXplID0gKHY6IHN0cmluZyB8IHN0cmluZ1tdKSA9PiBBcnJheS5pc0FycmF5KHYpID8gdiA6IFt2XVxyXG4gICAgICBsZXQgZXZlbnREYXRhOiBib29sZWFuIHwgRGF0ZUV2ZW50Q29sb3JWYWx1ZVxyXG4gICAgICBsZXQgZXZlbnRDb2xvcnM6IHN0cmluZ1tdID0gW11cclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnRzKSkge1xyXG4gICAgICAgIGV2ZW50RGF0YSA9IHRoaXMuZXZlbnRzLmluY2x1ZGVzKGRhdGUpXHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5ldmVudHMgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgIGV2ZW50RGF0YSA9IHRoaXMuZXZlbnRzKGRhdGUpIHx8IGZhbHNlXHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5ldmVudHMpIHtcclxuICAgICAgICBldmVudERhdGEgPSB0aGlzLmV2ZW50c1tkYXRlXSB8fCBmYWxzZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGV2ZW50RGF0YSA9IGZhbHNlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghZXZlbnREYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnREYXRhICE9PSB0cnVlKSB7XHJcbiAgICAgICAgZXZlbnRDb2xvcnMgPSBhcnJheWl6ZShldmVudERhdGEpXHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuZXZlbnRDb2xvciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBldmVudENvbG9ycyA9IFt0aGlzLmV2ZW50Q29sb3JdXHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuZXZlbnRDb2xvciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIGV2ZW50Q29sb3JzID0gYXJyYXlpemUodGhpcy5ldmVudENvbG9yKGRhdGUpKVxyXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5ldmVudENvbG9yKSkge1xyXG4gICAgICAgIGV2ZW50Q29sb3JzID0gdGhpcy5ldmVudENvbG9yXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXZlbnRDb2xvcnMgPSBhcnJheWl6ZSh0aGlzLmV2ZW50Q29sb3JbZGF0ZV0pXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBldmVudENvbG9ycy5maWx0ZXIodiA9PiB2KVxyXG4gICAgfSxcclxuICAgIGdlbkV2ZW50cyAoZGF0ZTogc3RyaW5nKSB7XHJcbiAgICAgIGNvbnN0IGV2ZW50Q29sb3JzID0gdGhpcy5nZXRFdmVudENvbG9ycyhkYXRlKVxyXG5cclxuICAgICAgcmV0dXJuIGV2ZW50Q29sb3JzLmxlbmd0aCA/IHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3YtZGF0ZS1waWNrZXItdGFibGVfX2V2ZW50cydcclxuICAgICAgfSwgZXZlbnRDb2xvcnMubWFwKGNvbG9yID0+IHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0QmFja2dyb3VuZENvbG9yKGNvbG9yKSkpKSA6IG51bGxcclxuICAgIH0sXHJcbiAgICB3aGVlbCAoZTogV2hlZWxFdmVudCwgY2FsY3VsYXRlVGFibGVEYXRlOiBDYWxjdWxhdGVUYWJsZURhdGVGdW5jdGlvbikge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgdGhpcy4kZW1pdCgndGFibGVEYXRlJywgY2FsY3VsYXRlVGFibGVEYXRlKGUuZGVsdGFZKSlcclxuICAgIH0sXHJcbiAgICB0b3VjaCAodmFsdWU6IG51bWJlciwgY2FsY3VsYXRlVGFibGVEYXRlOiBDYWxjdWxhdGVUYWJsZURhdGVGdW5jdGlvbikge1xyXG4gICAgICB0aGlzLiRlbWl0KCd0YWJsZURhdGUnLCBjYWxjdWxhdGVUYWJsZURhdGUodmFsdWUpKVxyXG4gICAgfSxcclxuICAgIGdlblRhYmxlIChzdGF0aWNDbGFzczogc3RyaW5nLCBjaGlsZHJlbjogVk5vZGVDaGlsZHJlbiwgY2FsY3VsYXRlVGFibGVEYXRlOiBDYWxjdWxhdGVUYWJsZURhdGVGdW5jdGlvbikge1xyXG4gICAgICBjb25zdCB0cmFuc2l0aW9uID0gdGhpcy4kY3JlYXRlRWxlbWVudCgndHJhbnNpdGlvbicsIHtcclxuICAgICAgICBwcm9wczogeyBuYW1lOiB0aGlzLmNvbXB1dGVkVHJhbnNpdGlvbiB9XHJcbiAgICAgIH0sIFt0aGlzLiRjcmVhdGVFbGVtZW50KCd0YWJsZScsIHsga2V5OiB0aGlzLnRhYmxlRGF0ZSB9LCBjaGlsZHJlbildKVxyXG5cclxuICAgICAgY29uc3QgdG91Y2hEaXJlY3RpdmUgPSB7XHJcbiAgICAgICAgbmFtZTogJ3RvdWNoJyxcclxuICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgbGVmdDogKGU6IFRvdWNoV3JhcHBlcikgPT4gKGUub2Zmc2V0WCA8IC0xNSkgJiYgdGhpcy50b3VjaCgxLCBjYWxjdWxhdGVUYWJsZURhdGUpLFxyXG4gICAgICAgICAgcmlnaHQ6IChlOiBUb3VjaFdyYXBwZXIpID0+IChlLm9mZnNldFggPiAxNSkgJiYgdGhpcy50b3VjaCgtMSwgY2FsY3VsYXRlVGFibGVEYXRlKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcclxuICAgICAgICBzdGF0aWNDbGFzcyxcclxuICAgICAgICBjbGFzczoge1xyXG4gICAgICAgICAgJ3YtZGF0ZS1waWNrZXItdGFibGUtLWRpc2FibGVkJzogdGhpcy5kaXNhYmxlZCxcclxuICAgICAgICAgIC4uLnRoaXMudGhlbWVDbGFzc2VzXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbjogKCF0aGlzLmRpc2FibGVkICYmIHRoaXMuc2Nyb2xsYWJsZSkgPyB7XHJcbiAgICAgICAgICB3aGVlbDogKGU6IFdoZWVsRXZlbnQpID0+IHRoaXMud2hlZWwoZSwgY2FsY3VsYXRlVGFibGVEYXRlKVxyXG4gICAgICAgIH0gOiB1bmRlZmluZWQsXHJcbiAgICAgICAgZGlyZWN0aXZlczogW3RvdWNoRGlyZWN0aXZlXVxyXG4gICAgICB9LCBbdHJhbnNpdGlvbl0pXHJcbiAgICB9XHJcbiAgfVxyXG59KVxyXG4iXX0=