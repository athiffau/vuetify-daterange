import { validateTimestamp, parseDate } from './timestamp';
export default {
    base: {
        start: {
            type: String,
            validate: validateTimestamp,
            default: () => parseDate(new Date()).date
        },
        end: {
            type: String,
            validate: validateTimestamp,
            default: '0000-00-00'
        },
        weekdays: {
            type: Array,
            default: () => [0, 1, 2, 3, 4, 5, 6]
        },
        hideHeader: {
            type: Boolean,
            default: false
        },
        shortWeekdays: {
            type: Boolean,
            default: true
        },
        weekdayFormat: {
            type: Function,
            default: null
        },
        dayFormat: {
            type: Function,
            default: null
        },
        locale: {
            type: String,
            default: 'en-us'
        }
    },
    intervals: {
        maxDays: {
            type: Number,
            default: 7
        },
        shortIntervals: {
            type: Boolean,
            default: true
        },
        intervalHeight: {
            type: [Number, String],
            default: 40,
            validate: validateNumber
        },
        intervalMinutes: {
            type: [Number, String],
            default: 60,
            validate: validateNumber
        },
        firstInterval: {
            type: [Number, String],
            default: 0,
            validate: validateNumber
        },
        intervalCount: {
            type: [Number, String],
            default: 24,
            validate: validateNumber
        },
        intervalFormat: {
            type: Function,
            default: null
        },
        intervalStyle: {
            type: Function,
            default: null
        },
        showIntervalLabel: {
            type: Function,
            default: null
        }
    },
    weeks: {
        minWeeks: {
            validate: validateNumber,
            default: 1
        },
        shortMonths: {
            type: Boolean,
            default: true
        },
        showMonthOnFirst: {
            type: Boolean,
            default: true
        },
        monthFormat: {
            type: Function,
            default: null
        }
    },
    calendar: {
        type: {
            type: String,
            default: 'month'
        },
        value: {
            type: String,
            validate: validateTimestamp
        }
    }
};
function validateNumber(input) {
    return isFinite(parseInt(input));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2FsZW5kYXIvdXRpbC9wcm9wcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRTFELGVBQWU7SUFDYixJQUFJLEVBQUU7UUFDSixLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtTQUMxQztRQUNELEdBQUcsRUFBRTtZQUNILElBQUksRUFBRSxNQUFNO1lBQ1osUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixPQUFPLEVBQUUsWUFBWTtTQUN0QjtRQUNELFFBQVEsRUFBRTtZQUNSLElBQUksRUFBRSxLQUF1QjtZQUM3QixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDckM7UUFDRCxVQUFVLEVBQUU7WUFDVixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxLQUFLO1NBQ2Y7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxTQUFTLEVBQUU7WUFDVCxJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxNQUFNLEVBQUU7WUFDTixJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxPQUFPO1NBQ2pCO0tBQ0Y7SUFDRCxTQUFTLEVBQUU7UUFDVCxPQUFPLEVBQUU7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsUUFBUSxFQUFFLGNBQWM7U0FDekI7UUFDRCxlQUFlLEVBQUU7WUFDZixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsUUFBUSxFQUFFLGNBQWM7U0FDekI7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxDQUFDO1lBQ1YsUUFBUSxFQUFFLGNBQWM7U0FDekI7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1lBQ3RCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsUUFBUSxFQUFFLGNBQWM7U0FDekI7UUFDRCxjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxhQUFhLEVBQUU7WUFDYixJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxpQkFBaUIsRUFBRTtZQUNqQixJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELEtBQUssRUFBRTtRQUNMLFFBQVEsRUFBRTtZQUNSLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxnQkFBZ0IsRUFBRTtZQUNoQixJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsUUFBUTtZQUNkLE9BQU8sRUFBRSxJQUFJO1NBQ2Q7S0FDRjtJQUNELFFBQVEsRUFBRTtRQUNSLElBQUksRUFBRTtZQUNKLElBQUksRUFBRSxNQUFNO1lBQ1osT0FBTyxFQUFFLE9BQU87U0FDakI7UUFDRCxLQUFLLEVBQUU7WUFDTCxJQUFJLEVBQUUsTUFBTTtZQUNaLFFBQVEsRUFBRSxpQkFBaUI7U0FDNUI7S0FDRjtDQUNGLENBQUE7QUFFRCxTQUFTLGNBQWMsQ0FBRSxLQUFVO0lBQ2pDLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgdmFsaWRhdGVUaW1lc3RhbXAsIHBhcnNlRGF0ZSB9IGZyb20gJy4vdGltZXN0YW1wJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGJhc2U6IHtcclxuICAgIHN0YXJ0OiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlVGltZXN0YW1wLFxyXG4gICAgICBkZWZhdWx0OiAoKSA9PiBwYXJzZURhdGUobmV3IERhdGUoKSkuZGF0ZVxyXG4gICAgfSxcclxuICAgIGVuZDoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZVRpbWVzdGFtcCxcclxuICAgICAgZGVmYXVsdDogJzAwMDAtMDAtMDAnXHJcbiAgICB9LFxyXG4gICAgd2Vla2RheXM6IHtcclxuICAgICAgdHlwZTogQXJyYXkgYXMgKCkgPT4gbnVtYmVyW10sXHJcbiAgICAgIGRlZmF1bHQ6ICgpID0+IFswLCAxLCAyLCAzLCA0LCA1LCA2XVxyXG4gICAgfSxcclxuICAgIGhpZGVIZWFkZXI6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogZmFsc2VcclxuICAgIH0sXHJcbiAgICBzaG9ydFdlZWtkYXlzOiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIGRlZmF1bHQ6IHRydWVcclxuICAgIH0sXHJcbiAgICB3ZWVrZGF5Rm9ybWF0OiB7XHJcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLCAvLyBWVGltZXN0YW1wRm9ybWF0dGVyLFxyXG4gICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICB9LFxyXG4gICAgZGF5Rm9ybWF0OiB7XHJcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLCAvLyBWVGltZXN0YW1wRm9ybWF0dGVyLFxyXG4gICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICB9LFxyXG4gICAgbG9jYWxlOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgZGVmYXVsdDogJ2VuLXVzJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgaW50ZXJ2YWxzOiB7XHJcbiAgICBtYXhEYXlzOiB7XHJcbiAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgZGVmYXVsdDogN1xyXG4gICAgfSxcclxuICAgIHNob3J0SW50ZXJ2YWxzOiB7XHJcbiAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgIGRlZmF1bHQ6IHRydWVcclxuICAgIH0sXHJcbiAgICBpbnRlcnZhbEhlaWdodDoge1xyXG4gICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLFxyXG4gICAgICBkZWZhdWx0OiA0MCxcclxuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlTnVtYmVyXHJcbiAgICB9LFxyXG4gICAgaW50ZXJ2YWxNaW51dGVzOiB7XHJcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXHJcbiAgICAgIGRlZmF1bHQ6IDYwLFxyXG4gICAgICB2YWxpZGF0ZTogdmFsaWRhdGVOdW1iZXJcclxuICAgIH0sXHJcbiAgICBmaXJzdEludGVydmFsOiB7XHJcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXHJcbiAgICAgIGRlZmF1bHQ6IDAsXHJcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZU51bWJlclxyXG4gICAgfSxcclxuICAgIGludGVydmFsQ291bnQ6IHtcclxuICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSxcclxuICAgICAgZGVmYXVsdDogMjQsXHJcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZU51bWJlclxyXG4gICAgfSxcclxuICAgIGludGVydmFsRm9ybWF0OiB7XHJcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLCAvLyBWVGltZXN0YW1wRm9ybWF0dGVyLFxyXG4gICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICB9LFxyXG4gICAgaW50ZXJ2YWxTdHlsZToge1xyXG4gICAgICB0eXBlOiBGdW5jdGlvbiwgLy8gKGludGVydmFsOiBWVGltZXN0YW1wKTogb2JqZWN0XHJcbiAgICAgIGRlZmF1bHQ6IG51bGxcclxuICAgIH0sXHJcbiAgICBzaG93SW50ZXJ2YWxMYWJlbDoge1xyXG4gICAgICB0eXBlOiBGdW5jdGlvbiwgLy8gKGludGVydmFsOiBWVGltZXN0YW1wKTogYm9vbGVhblxyXG4gICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICB9XHJcbiAgfSxcclxuICB3ZWVrczoge1xyXG4gICAgbWluV2Vla3M6IHtcclxuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlTnVtYmVyLFxyXG4gICAgICBkZWZhdWx0OiAxXHJcbiAgICB9LFxyXG4gICAgc2hvcnRNb250aHM6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIHNob3dNb250aE9uRmlyc3Q6IHtcclxuICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgZGVmYXVsdDogdHJ1ZVxyXG4gICAgfSxcclxuICAgIG1vbnRoRm9ybWF0OiB7XHJcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLCAvLyBWVGltZXN0YW1wRm9ybWF0dGVyLFxyXG4gICAgICBkZWZhdWx0OiBudWxsXHJcbiAgICB9XHJcbiAgfSxcclxuICBjYWxlbmRhcjoge1xyXG4gICAgdHlwZToge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIGRlZmF1bHQ6ICdtb250aCdcclxuICAgIH0sXHJcbiAgICB2YWx1ZToge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZVRpbWVzdGFtcFxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKGlucHV0OiBhbnkpOiBib29sZWFuIHtcclxuICByZXR1cm4gaXNGaW5pdGUocGFyc2VJbnQoaW5wdXQpKVxyXG59XHJcbiJdfQ==