// Styles
import '../../stylus/components/_calendar-weekly.styl';
// Mixins
import CalendarBase from './mixins/calendar-base';
// Util
import props from './util/props';
import { createDayList, getDayIdentifier, createNativeLocaleFormatter } from './util/timestamp';
/* @vue/component */
export default CalendarBase.extend({
    name: 'v-calendar-weekly',
    props: props.weeks,
    computed: {
        staticClass() {
            return 'v-calendar-weekly';
        },
        classes() {
            return this.themeClasses;
        },
        parsedMinWeeks() {
            return parseInt(this.minWeeks);
        },
        days() {
            const minDays = this.parsedMinWeeks * this.weekdays.length;
            const start = this.getStartOfWeek(this.parsedStart);
            const end = this.getEndOfWeek(this.parsedEnd);
            return createDayList(start, end, this.times.today, this.weekdaySkips, Number.MAX_SAFE_INTEGER, minDays);
        },
        todayWeek() {
            const today = this.times.today;
            const start = this.getStartOfWeek(today);
            const end = this.getEndOfWeek(today);
            return createDayList(start, end, today, this.weekdaySkips, this.weekdays.length, this.weekdays.length);
        },
        monthFormatter() {
            if (this.monthFormat) {
                return this.monthFormat;
            }
            const longOptions = { timeZone: 'UTC', month: 'long' };
            const shortOptions = { timeZone: 'UTC', month: 'short' };
            return createNativeLocaleFormatter(this.locale, (_tms, short) => short ? shortOptions : longOptions);
        }
    },
    methods: {
        isOutside(day) {
            const dayIdentifier = getDayIdentifier(day);
            return dayIdentifier < getDayIdentifier(this.parsedStart) ||
                dayIdentifier > getDayIdentifier(this.parsedEnd);
        },
        genHead() {
            return this.$createElement('div', {
                staticClass: 'v-calendar-weekly__head'
            }, this.genHeadDays());
        },
        genHeadDays() {
            return this.todayWeek.map(this.genHeadDay);
        },
        genHeadDay(day, index) {
            const outside = this.isOutside(this.days[index]);
            const color = day.present ? this.color : undefined;
            return this.$createElement('div', this.setTextColor(color, {
                key: day.date,
                staticClass: 'v-calendar-weekly__head-weekday',
                class: this.getRelativeClasses(day, outside)
            }), this.weekdayFormatter(day, this.shortWeekdays));
        },
        genWeeks() {
            const days = this.days;
            const weekDays = this.weekdays.length;
            const weeks = [];
            for (let i = 0; i < days.length; i += weekDays) {
                weeks.push(this.genWeek(days.slice(i, i + weekDays)));
            }
            return weeks;
        },
        genWeek(week) {
            return this.$createElement('div', {
                key: week[0].date,
                staticClass: 'v-calendar-weekly__week'
            }, week.map(this.genDay));
        },
        genDay(day) {
            const outside = this.isOutside(day);
            const slot = this.$scopedSlots.day;
            const slotData = { outside, ...day };
            const hasMonth = day.day === 1 && this.showMonthOnFirst;
            return this.$createElement('div', {
                key: day.date,
                staticClass: 'v-calendar-weekly__day',
                class: this.getRelativeClasses(day, outside),
                on: this.getDefaultMouseEventHandlers(':day', _e => day)
            }, [
                this.genDayLabel(day),
                hasMonth ? this.genDayMonth(day) : '',
                slot ? slot(slotData) : ''
            ]);
        },
        genDayLabel(day) {
            const color = day.present ? this.color : undefined;
            const slot = this.$scopedSlots.dayLabel;
            return this.$createElement('div', this.setTextColor(color, {
                staticClass: 'v-calendar-weekly__day-label',
                on: this.getMouseEventHandlers({
                    'click:date': { event: 'click', stop: true },
                    'contextmenu:date': { event: 'contextmenu', stop: true, prevent: true, result: false }
                }, _e => day)
            }), slot ? slot(day) : this.dayFormatter(day, false));
        },
        genDayMonth(day) {
            const color = day.present ? this.color : undefined;
            const slot = this.$scopedSlots.dayMonth;
            return this.$createElement('div', this.setTextColor(color, {
                staticClass: 'v-calendar-weekly__day-month'
            }), slot ? slot(day) : this.monthFormatter(day, this.shortMonths));
        }
    },
    render(h) {
        return h('div', {
            staticClass: this.staticClass,
            class: this.classes,
            nativeOn: {
                dragstart: (e) => {
                    e.preventDefault();
                }
            }
        }, [
            !this.hideHeader ? this.genHead() : '',
            ...this.genWeeks()
        ]);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNhbGVuZGFyV2Vla2x5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL1ZDYWxlbmRhcldlZWtseS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTywrQ0FBK0MsQ0FBQTtBQUt0RCxTQUFTO0FBQ1QsT0FBTyxZQUFZLE1BQU0sd0JBQXdCLENBQUE7QUFFakQsT0FBTztBQUNQLE9BQU8sS0FBSyxNQUFNLGNBQWMsQ0FBQTtBQUNoQyxPQUFPLEVBR0wsYUFBYSxFQUNiLGdCQUFnQixFQUNoQiwyQkFBMkIsRUFDNUIsTUFBTSxrQkFBa0IsQ0FBQTtBQUV6QixvQkFBb0I7QUFDcEIsZUFBZSxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksRUFBRSxtQkFBbUI7SUFFekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO0lBRWxCLFFBQVEsRUFBRTtRQUNSLFdBQVc7WUFDVCxPQUFPLG1CQUFtQixDQUFBO1FBQzVCLENBQUM7UUFDRCxPQUFPO1lBQ0wsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFBO1FBQzFCLENBQUM7UUFDRCxjQUFjO1lBQ1osT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hDLENBQUM7UUFDRCxJQUFJO1lBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQTtZQUMxRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUNuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUU3QyxPQUFPLGFBQWEsQ0FDbEIsS0FBSyxFQUNMLEdBQUcsRUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFDaEIsSUFBSSxDQUFDLFlBQVksRUFDakIsTUFBTSxDQUFDLGdCQUFnQixFQUN2QixPQUFPLENBQ1IsQ0FBQTtRQUNILENBQUM7UUFDRCxTQUFTO1lBQ1AsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUE7WUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUN4QyxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBRXBDLE9BQU8sYUFBYSxDQUNsQixLQUFLLEVBQ0wsR0FBRyxFQUNILEtBQUssRUFDTCxJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQ3JCLENBQUE7UUFDSCxDQUFDO1FBQ0QsY0FBYztZQUNaLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUMsV0FBa0MsQ0FBQTthQUMvQztZQUVELE1BQU0sV0FBVyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUE7WUFDdEQsTUFBTSxZQUFZLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQTtZQUV4RCxPQUFPLDJCQUEyQixDQUNoQyxJQUFJLENBQUMsTUFBTSxFQUNYLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FDcEQsQ0FBQTtRQUNILENBQUM7S0FDRjtJQUVELE9BQU8sRUFBRTtRQUNQLFNBQVMsQ0FBRSxHQUFlO1lBQ3hCLE1BQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBRTNDLE9BQU8sYUFBYSxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQ2xELGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDekQsQ0FBQztRQUNELE9BQU87WUFDTCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFO2dCQUNoQyxXQUFXLEVBQUUseUJBQXlCO2FBQ3ZDLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7UUFDeEIsQ0FBQztRQUNELFdBQVc7WUFDVCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUM1QyxDQUFDO1FBQ0QsVUFBVSxDQUFFLEdBQWUsRUFBRSxLQUFhO1lBQ3hDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1lBQ2hELE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQTtZQUVsRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFO2dCQUN6RCxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2IsV0FBVyxFQUFFLGlDQUFpQztnQkFDOUMsS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO2FBQzdDLENBQUMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFBO1FBQ3JELENBQUM7UUFDRCxRQUFRO1lBQ04sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQTtZQUN0QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQTtZQUNyQyxNQUFNLEtBQUssR0FBWSxFQUFFLENBQUE7WUFDekIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFDOUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDdEQ7WUFFRCxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUM7UUFDRCxPQUFPLENBQUUsSUFBa0I7WUFDekIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRTtnQkFDaEMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO2dCQUNqQixXQUFXLEVBQUUseUJBQXlCO2FBQ3ZDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUMzQixDQUFDO1FBQ0QsTUFBTSxDQUFFLEdBQWU7WUFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNuQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQTtZQUNsQyxNQUFNLFFBQVEsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFBO1lBQ3BDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQTtZQUV2RCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFO2dCQUNoQyxHQUFHLEVBQUUsR0FBRyxDQUFDLElBQUk7Z0JBQ2IsV0FBVyxFQUFFLHdCQUF3QjtnQkFDckMsS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO2dCQUM1QyxFQUFFLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQzthQUN6RCxFQUFFO2dCQUNELElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDO2dCQUNyQixRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2FBQzNCLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxXQUFXLENBQUUsR0FBZTtZQUMxQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7WUFDbEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUE7WUFFdkMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtnQkFDekQsV0FBVyxFQUFFLDhCQUE4QjtnQkFDM0MsRUFBRSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztvQkFDN0IsWUFBWSxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO29CQUM1QyxrQkFBa0IsRUFBRSxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7aUJBQ3ZGLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDZCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQ3hFLENBQUM7UUFDRCxXQUFXLENBQUUsR0FBZTtZQUMxQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7WUFDbEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUE7WUFFdkMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRTtnQkFDekQsV0FBVyxFQUFFLDhCQUE4QjthQUM1QyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQTtRQUNyRixDQUFDO0tBQ0Y7SUFFRCxNQUFNLENBQUUsQ0FBQztRQUNQLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRTtZQUNkLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztZQUM3QixLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDbkIsUUFBUSxFQUFFO2dCQUNSLFNBQVMsRUFBRSxDQUFDLENBQWEsRUFBRSxFQUFFO29CQUMzQixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUE7Z0JBQ3BCLENBQUM7YUFDRjtTQUNGLEVBQUU7WUFDRCxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN0QyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUU7U0FDbkIsQ0FBQyxDQUFBO0lBQ0osQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIFN0eWxlc1xyXG5pbXBvcnQgJy4uLy4uL3N0eWx1cy9jb21wb25lbnRzL19jYWxlbmRhci13ZWVrbHkuc3R5bCdcclxuXHJcbi8vIFR5cGVzXHJcbmltcG9ydCB7IFZOb2RlLCBWTm9kZUNoaWxkcmVuIH0gZnJvbSAndnVlJ1xyXG5cclxuLy8gTWl4aW5zXHJcbmltcG9ydCBDYWxlbmRhckJhc2UgZnJvbSAnLi9taXhpbnMvY2FsZW5kYXItYmFzZSdcclxuXHJcbi8vIFV0aWxcclxuaW1wb3J0IHByb3BzIGZyb20gJy4vdXRpbC9wcm9wcydcclxuaW1wb3J0IHtcclxuICBWVGltZXN0YW1wLFxyXG4gIFZUaW1lc3RhbXBGb3JtYXR0ZXIsXHJcbiAgY3JlYXRlRGF5TGlzdCxcclxuICBnZXREYXlJZGVudGlmaWVyLFxyXG4gIGNyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlclxyXG59IGZyb20gJy4vdXRpbC90aW1lc3RhbXAnXHJcblxyXG4vKiBAdnVlL2NvbXBvbmVudCAqL1xyXG5leHBvcnQgZGVmYXVsdCBDYWxlbmRhckJhc2UuZXh0ZW5kKHtcclxuICBuYW1lOiAndi1jYWxlbmRhci13ZWVrbHknLFxyXG5cclxuICBwcm9wczogcHJvcHMud2Vla3MsXHJcblxyXG4gIGNvbXB1dGVkOiB7XHJcbiAgICBzdGF0aWNDbGFzcyAoKTogc3RyaW5nIHtcclxuICAgICAgcmV0dXJuICd2LWNhbGVuZGFyLXdlZWtseSdcclxuICAgIH0sXHJcbiAgICBjbGFzc2VzICgpOiBvYmplY3Qge1xyXG4gICAgICByZXR1cm4gdGhpcy50aGVtZUNsYXNzZXNcclxuICAgIH0sXHJcbiAgICBwYXJzZWRNaW5XZWVrcyAoKTogbnVtYmVyIHtcclxuICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMubWluV2Vla3MpXHJcbiAgICB9LFxyXG4gICAgZGF5cyAoKTogVlRpbWVzdGFtcFtdIHtcclxuICAgICAgY29uc3QgbWluRGF5cyA9IHRoaXMucGFyc2VkTWluV2Vla3MgKiB0aGlzLndlZWtkYXlzLmxlbmd0aFxyXG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U3RhcnRPZldlZWsodGhpcy5wYXJzZWRTdGFydClcclxuICAgICAgY29uc3QgZW5kID0gdGhpcy5nZXRFbmRPZldlZWsodGhpcy5wYXJzZWRFbmQpXHJcblxyXG4gICAgICByZXR1cm4gY3JlYXRlRGF5TGlzdChcclxuICAgICAgICBzdGFydCxcclxuICAgICAgICBlbmQsXHJcbiAgICAgICAgdGhpcy50aW1lcy50b2RheSxcclxuICAgICAgICB0aGlzLndlZWtkYXlTa2lwcyxcclxuICAgICAgICBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUixcclxuICAgICAgICBtaW5EYXlzXHJcbiAgICAgIClcclxuICAgIH0sXHJcbiAgICB0b2RheVdlZWsgKCk6IFZUaW1lc3RhbXBbXSB7XHJcbiAgICAgIGNvbnN0IHRvZGF5ID0gdGhpcy50aW1lcy50b2RheVxyXG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U3RhcnRPZldlZWsodG9kYXkpXHJcbiAgICAgIGNvbnN0IGVuZCA9IHRoaXMuZ2V0RW5kT2ZXZWVrKHRvZGF5KVxyXG5cclxuICAgICAgcmV0dXJuIGNyZWF0ZURheUxpc3QoXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgZW5kLFxyXG4gICAgICAgIHRvZGF5LFxyXG4gICAgICAgIHRoaXMud2Vla2RheVNraXBzLFxyXG4gICAgICAgIHRoaXMud2Vla2RheXMubGVuZ3RoLFxyXG4gICAgICAgIHRoaXMud2Vla2RheXMubGVuZ3RoXHJcbiAgICAgIClcclxuICAgIH0sXHJcbiAgICBtb250aEZvcm1hdHRlciAoKTogVlRpbWVzdGFtcEZvcm1hdHRlciB7XHJcbiAgICAgIGlmICh0aGlzLm1vbnRoRm9ybWF0KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGhGb3JtYXQgYXMgVlRpbWVzdGFtcEZvcm1hdHRlclxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBsb25nT3B0aW9ucyA9IHsgdGltZVpvbmU6ICdVVEMnLCBtb250aDogJ2xvbmcnIH1cclxuICAgICAgY29uc3Qgc2hvcnRPcHRpb25zID0geyB0aW1lWm9uZTogJ1VUQycsIG1vbnRoOiAnc2hvcnQnIH1cclxuXHJcbiAgICAgIHJldHVybiBjcmVhdGVOYXRpdmVMb2NhbGVGb3JtYXR0ZXIoXHJcbiAgICAgICAgdGhpcy5sb2NhbGUsXHJcbiAgICAgICAgKF90bXMsIHNob3J0KSA9PiBzaG9ydCA/IHNob3J0T3B0aW9ucyA6IGxvbmdPcHRpb25zXHJcbiAgICAgIClcclxuICAgIH1cclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBpc091dHNpZGUgKGRheTogVlRpbWVzdGFtcCk6IGJvb2xlYW4ge1xyXG4gICAgICBjb25zdCBkYXlJZGVudGlmaWVyID0gZ2V0RGF5SWRlbnRpZmllcihkYXkpXHJcblxyXG4gICAgICByZXR1cm4gZGF5SWRlbnRpZmllciA8IGdldERheUlkZW50aWZpZXIodGhpcy5wYXJzZWRTdGFydCkgfHxcclxuICAgICAgICAgICAgIGRheUlkZW50aWZpZXIgPiBnZXREYXlJZGVudGlmaWVyKHRoaXMucGFyc2VkRW5kKVxyXG4gICAgfSxcclxuICAgIGdlbkhlYWQgKCk6IFZOb2RlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3YtY2FsZW5kYXItd2Vla2x5X19oZWFkJ1xyXG4gICAgICB9LCB0aGlzLmdlbkhlYWREYXlzKCkpXHJcbiAgICB9LFxyXG4gICAgZ2VuSGVhZERheXMgKCk6IFZOb2RlW10ge1xyXG4gICAgICByZXR1cm4gdGhpcy50b2RheVdlZWsubWFwKHRoaXMuZ2VuSGVhZERheSlcclxuICAgIH0sXHJcbiAgICBnZW5IZWFkRGF5IChkYXk6IFZUaW1lc3RhbXAsIGluZGV4OiBudW1iZXIpOiBWTm9kZSB7XHJcbiAgICAgIGNvbnN0IG91dHNpZGUgPSB0aGlzLmlzT3V0c2lkZSh0aGlzLmRheXNbaW5kZXhdKVxyXG4gICAgICBjb25zdCBjb2xvciA9IGRheS5wcmVzZW50ID8gdGhpcy5jb2xvciA6IHVuZGVmaW5lZFxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0VGV4dENvbG9yKGNvbG9yLCB7XHJcbiAgICAgICAga2V5OiBkYXkuZGF0ZSxcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3YtY2FsZW5kYXItd2Vla2x5X19oZWFkLXdlZWtkYXknLFxyXG4gICAgICAgIGNsYXNzOiB0aGlzLmdldFJlbGF0aXZlQ2xhc3NlcyhkYXksIG91dHNpZGUpXHJcbiAgICAgIH0pLCB0aGlzLndlZWtkYXlGb3JtYXR0ZXIoZGF5LCB0aGlzLnNob3J0V2Vla2RheXMpKVxyXG4gICAgfSxcclxuICAgIGdlbldlZWtzICgpOiBWTm9kZVtdIHtcclxuICAgICAgY29uc3QgZGF5cyA9IHRoaXMuZGF5c1xyXG4gICAgICBjb25zdCB3ZWVrRGF5cyA9IHRoaXMud2Vla2RheXMubGVuZ3RoXHJcbiAgICAgIGNvbnN0IHdlZWtzOiBWTm9kZVtdID0gW11cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXlzLmxlbmd0aDsgaSArPSB3ZWVrRGF5cykge1xyXG4gICAgICAgIHdlZWtzLnB1c2godGhpcy5nZW5XZWVrKGRheXMuc2xpY2UoaSwgaSArIHdlZWtEYXlzKSkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB3ZWVrc1xyXG4gICAgfSxcclxuICAgIGdlbldlZWsgKHdlZWs6IFZUaW1lc3RhbXBbXSk6IFZOb2RlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcclxuICAgICAgICBrZXk6IHdlZWtbMF0uZGF0ZSxcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3YtY2FsZW5kYXItd2Vla2x5X193ZWVrJ1xyXG4gICAgICB9LCB3ZWVrLm1hcCh0aGlzLmdlbkRheSkpXHJcbiAgICB9LFxyXG4gICAgZ2VuRGF5IChkYXk6IFZUaW1lc3RhbXApOiBWTm9kZSB7XHJcbiAgICAgIGNvbnN0IG91dHNpZGUgPSB0aGlzLmlzT3V0c2lkZShkYXkpXHJcbiAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5kYXlcclxuICAgICAgY29uc3Qgc2xvdERhdGEgPSB7IG91dHNpZGUsIC4uLmRheSB9XHJcbiAgICAgIGNvbnN0IGhhc01vbnRoID0gZGF5LmRheSA9PT0gMSAmJiB0aGlzLnNob3dNb250aE9uRmlyc3RcclxuXHJcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7XHJcbiAgICAgICAga2V5OiBkYXkuZGF0ZSxcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3YtY2FsZW5kYXItd2Vla2x5X19kYXknLFxyXG4gICAgICAgIGNsYXNzOiB0aGlzLmdldFJlbGF0aXZlQ2xhc3NlcyhkYXksIG91dHNpZGUpLFxyXG4gICAgICAgIG9uOiB0aGlzLmdldERlZmF1bHRNb3VzZUV2ZW50SGFuZGxlcnMoJzpkYXknLCBfZSA9PiBkYXkpXHJcbiAgICAgIH0sIFtcclxuICAgICAgICB0aGlzLmdlbkRheUxhYmVsKGRheSksXHJcbiAgICAgICAgaGFzTW9udGggPyB0aGlzLmdlbkRheU1vbnRoKGRheSkgOiAnJyxcclxuICAgICAgICBzbG90ID8gc2xvdChzbG90RGF0YSkgOiAnJ1xyXG4gICAgICBdKVxyXG4gICAgfSxcclxuICAgIGdlbkRheUxhYmVsIChkYXk6IFZUaW1lc3RhbXApOiBWTm9kZSB7XHJcbiAgICAgIGNvbnN0IGNvbG9yID0gZGF5LnByZXNlbnQgPyB0aGlzLmNvbG9yIDogdW5kZWZpbmVkXHJcbiAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5kYXlMYWJlbFxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0VGV4dENvbG9yKGNvbG9yLCB7XHJcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWNhbGVuZGFyLXdlZWtseV9fZGF5LWxhYmVsJyxcclxuICAgICAgICBvbjogdGhpcy5nZXRNb3VzZUV2ZW50SGFuZGxlcnMoe1xyXG4gICAgICAgICAgJ2NsaWNrOmRhdGUnOiB7IGV2ZW50OiAnY2xpY2snLCBzdG9wOiB0cnVlIH0sXHJcbiAgICAgICAgICAnY29udGV4dG1lbnU6ZGF0ZSc6IHsgZXZlbnQ6ICdjb250ZXh0bWVudScsIHN0b3A6IHRydWUsIHByZXZlbnQ6IHRydWUsIHJlc3VsdDogZmFsc2UgfVxyXG4gICAgICAgIH0sIF9lID0+IGRheSlcclxuICAgICAgfSksIHNsb3QgPyBzbG90KGRheSkgYXMgVk5vZGVDaGlsZHJlbiA6IHRoaXMuZGF5Rm9ybWF0dGVyKGRheSwgZmFsc2UpKVxyXG4gICAgfSxcclxuICAgIGdlbkRheU1vbnRoIChkYXk6IFZUaW1lc3RhbXApOiBWTm9kZSB8IHN0cmluZyB7XHJcbiAgICAgIGNvbnN0IGNvbG9yID0gZGF5LnByZXNlbnQgPyB0aGlzLmNvbG9yIDogdW5kZWZpbmVkXHJcbiAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLiRzY29wZWRTbG90cy5kYXlNb250aFxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0VGV4dENvbG9yKGNvbG9yLCB7XHJcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWNhbGVuZGFyLXdlZWtseV9fZGF5LW1vbnRoJ1xyXG4gICAgICB9KSwgc2xvdCA/IHNsb3QoZGF5KSBhcyBWTm9kZUNoaWxkcmVuIDogdGhpcy5tb250aEZvcm1hdHRlcihkYXksIHRoaXMuc2hvcnRNb250aHMpKVxyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHJlbmRlciAoaCk6IFZOb2RlIHtcclxuICAgIHJldHVybiBoKCdkaXYnLCB7XHJcbiAgICAgIHN0YXRpY0NsYXNzOiB0aGlzLnN0YXRpY0NsYXNzLFxyXG4gICAgICBjbGFzczogdGhpcy5jbGFzc2VzLFxyXG4gICAgICBuYXRpdmVPbjoge1xyXG4gICAgICAgIGRyYWdzdGFydDogKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgW1xyXG4gICAgICAhdGhpcy5oaWRlSGVhZGVyID8gdGhpcy5nZW5IZWFkKCkgOiAnJyxcclxuICAgICAgLi4udGhpcy5nZW5XZWVrcygpXHJcbiAgICBdKVxyXG4gIH1cclxufSlcclxuIl19