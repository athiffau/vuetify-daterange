import Vue from 'vue';
export default Vue.extend({
    name: 'mouse',
    methods: {
        getDefaultMouseEventHandlers(suffix, getEvent) {
            return this.getMouseEventHandlers({
                ['click' + suffix]: { event: 'click' },
                ['contextmenu' + suffix]: { event: 'contextmenu', prevent: true, result: false },
                ['mousedown' + suffix]: { event: 'mousedown' },
                ['mousemove' + suffix]: { event: 'mousemove' },
                ['mouseup' + suffix]: { event: 'mouseup' },
                ['mouseenter' + suffix]: { event: 'mouseenter' },
                ['mouseleave' + suffix]: { event: 'mouseleave' },
                ['touchstart' + suffix]: { event: 'touchstart' },
                ['touchmove' + suffix]: { event: 'touchmove' },
                ['touchend' + suffix]: { event: 'touchend' }
            }, getEvent);
        },
        getMouseEventHandlers(events, getEvent) {
            const on = {};
            for (const event in events) {
                const eventOptions = events[event];
                if (!this.$listeners[event])
                    continue;
                // TODO somehow pull in modifiers
                const prefix = eventOptions.passive ? '&' : ((eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : ''));
                const key = prefix + eventOptions.event;
                const handler = e => {
                    const mouseEvent = e;
                    if (eventOptions.button === undefined || (mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button)) {
                        if (eventOptions.prevent) {
                            e.preventDefault();
                        }
                        if (eventOptions.stop) {
                            e.stopPropagation();
                        }
                        this.$emit(event, getEvent(e));
                    }
                    return eventOptions.result;
                };
                if (key in on) {
                    if (Array.isArray(on[key])) {
                        on[key].push(handler);
                    }
                    else {
                        on[key] = [on[key], handler];
                    }
                }
                else {
                    on[key] = handler;
                }
            }
            return on;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW91c2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9WQ2FsZW5kYXIvbWl4aW5zL21vdXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQTtBQXFCckIsZUFBZSxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3hCLElBQUksRUFBRSxPQUFPO0lBRWIsT0FBTyxFQUFFO1FBQ1AsNEJBQTRCLENBQUUsTUFBYyxFQUFFLFFBQXNCO1lBQ2xFLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDO2dCQUNoQyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7Z0JBQ3RDLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7Z0JBQ2hGLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtnQkFDOUMsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO2dCQUM5QyxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUU7Z0JBQzFDLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRTtnQkFDaEQsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFO2dCQUNoRCxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUU7Z0JBQ2hELENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtnQkFDOUMsQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFO2FBQzdDLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDZCxDQUFDO1FBQ0QscUJBQXFCLENBQUUsTUFBbUIsRUFBRSxRQUFzQjtZQUNoRSxNQUFNLEVBQUUsR0FBbUIsRUFBRSxDQUFBO1lBRTdCLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO2dCQUMxQixNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBRWxDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFBRSxTQUFRO2dCQUVyQyxpQ0FBaUM7Z0JBRWpDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7Z0JBQ2hILE1BQU0sR0FBRyxHQUFHLE1BQU0sR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFBO2dCQUV2QyxNQUFNLE9BQU8sR0FBaUIsQ0FBQyxDQUFDLEVBQUU7b0JBQ2hDLE1BQU0sVUFBVSxHQUFlLENBQWUsQ0FBQTtvQkFDOUMsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLFNBQVMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLE1BQU0sQ0FBQyxFQUFFO3dCQUM5RyxJQUFJLFlBQVksQ0FBQyxPQUFPLEVBQUU7NEJBQ3hCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQTt5QkFDbkI7d0JBQ0QsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFOzRCQUNyQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUE7eUJBQ3BCO3dCQUNELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO3FCQUMvQjtvQkFFRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUE7Z0JBQzVCLENBQUMsQ0FBQTtnQkFFRCxJQUFJLEdBQUcsSUFBSSxFQUFFLEVBQUU7b0JBQ2IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO3dCQUN6QixFQUFFLENBQUMsR0FBRyxDQUFvQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtxQkFDMUM7eUJBQU07d0JBQ0wsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBbUIsQ0FBQTtxQkFDL0M7aUJBQ0Y7cUJBQU07b0JBQ0wsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQTtpQkFDbEI7YUFDRjtZQUVELE9BQU8sRUFBRSxDQUFBO1FBQ1gsQ0FBQztLQUNGO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcblxyXG5leHBvcnQgdHlwZSBNb3VzZUhhbmRsZXIgPSAoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpID0+IGFueVxyXG5cclxuZXhwb3J0IHR5cGUgTW91c2VFdmVudHMgPSB7XHJcbiAgW2V2ZW50OiBzdHJpbmddOiB7XHJcbiAgICBldmVudDogc3RyaW5nXHJcbiAgICBwYXNzaXZlPzogYm9vbGVhblxyXG4gICAgY2FwdHVyZT86IGJvb2xlYW5cclxuICAgIG9uY2U/OiBib29sZWFuXHJcbiAgICBzdG9wPzogYm9vbGVhblxyXG4gICAgcHJldmVudD86IGJvb2xlYW5cclxuICAgIGJ1dHRvbj86IG51bWJlclxyXG4gICAgcmVzdWx0PzogYW55XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNb3VzZUV2ZW50c01hcCA9IHtcclxuICBbZXZlbnQ6IHN0cmluZ106IE1vdXNlSGFuZGxlciB8IE1vdXNlSGFuZGxlcltdXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFZ1ZS5leHRlbmQoe1xyXG4gIG5hbWU6ICdtb3VzZScsXHJcblxyXG4gIG1ldGhvZHM6IHtcclxuICAgIGdldERlZmF1bHRNb3VzZUV2ZW50SGFuZGxlcnMgKHN1ZmZpeDogc3RyaW5nLCBnZXRFdmVudDogTW91c2VIYW5kbGVyKTogTW91c2VFdmVudHNNYXAge1xyXG4gICAgICByZXR1cm4gdGhpcy5nZXRNb3VzZUV2ZW50SGFuZGxlcnMoe1xyXG4gICAgICAgIFsnY2xpY2snICsgc3VmZml4XTogeyBldmVudDogJ2NsaWNrJyB9LFxyXG4gICAgICAgIFsnY29udGV4dG1lbnUnICsgc3VmZml4XTogeyBldmVudDogJ2NvbnRleHRtZW51JywgcHJldmVudDogdHJ1ZSwgcmVzdWx0OiBmYWxzZSB9LFxyXG4gICAgICAgIFsnbW91c2Vkb3duJyArIHN1ZmZpeF06IHsgZXZlbnQ6ICdtb3VzZWRvd24nIH0sXHJcbiAgICAgICAgWydtb3VzZW1vdmUnICsgc3VmZml4XTogeyBldmVudDogJ21vdXNlbW92ZScgfSxcclxuICAgICAgICBbJ21vdXNldXAnICsgc3VmZml4XTogeyBldmVudDogJ21vdXNldXAnIH0sXHJcbiAgICAgICAgWydtb3VzZWVudGVyJyArIHN1ZmZpeF06IHsgZXZlbnQ6ICdtb3VzZWVudGVyJyB9LFxyXG4gICAgICAgIFsnbW91c2VsZWF2ZScgKyBzdWZmaXhdOiB7IGV2ZW50OiAnbW91c2VsZWF2ZScgfSxcclxuICAgICAgICBbJ3RvdWNoc3RhcnQnICsgc3VmZml4XTogeyBldmVudDogJ3RvdWNoc3RhcnQnIH0sXHJcbiAgICAgICAgWyd0b3VjaG1vdmUnICsgc3VmZml4XTogeyBldmVudDogJ3RvdWNobW92ZScgfSxcclxuICAgICAgICBbJ3RvdWNoZW5kJyArIHN1ZmZpeF06IHsgZXZlbnQ6ICd0b3VjaGVuZCcgfVxyXG4gICAgICB9LCBnZXRFdmVudClcclxuICAgIH0sXHJcbiAgICBnZXRNb3VzZUV2ZW50SGFuZGxlcnMgKGV2ZW50czogTW91c2VFdmVudHMsIGdldEV2ZW50OiBNb3VzZUhhbmRsZXIpOiBNb3VzZUV2ZW50c01hcCB7XHJcbiAgICAgIGNvbnN0IG9uOiBNb3VzZUV2ZW50c01hcCA9IHt9XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGV2ZW50IGluIGV2ZW50cykge1xyXG4gICAgICAgIGNvbnN0IGV2ZW50T3B0aW9ucyA9IGV2ZW50c1tldmVudF1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLiRsaXN0ZW5lcnNbZXZlbnRdKSBjb250aW51ZVxyXG5cclxuICAgICAgICAvLyBUT0RPIHNvbWVob3cgcHVsbCBpbiBtb2RpZmllcnNcclxuXHJcbiAgICAgICAgY29uc3QgcHJlZml4ID0gZXZlbnRPcHRpb25zLnBhc3NpdmUgPyAnJicgOiAoKGV2ZW50T3B0aW9ucy5vbmNlID8gJ34nIDogJycpICsgKGV2ZW50T3B0aW9ucy5jYXB0dXJlID8gJyEnIDogJycpKVxyXG4gICAgICAgIGNvbnN0IGtleSA9IHByZWZpeCArIGV2ZW50T3B0aW9ucy5ldmVudFxyXG5cclxuICAgICAgICBjb25zdCBoYW5kbGVyOiBNb3VzZUhhbmRsZXIgPSBlID0+IHtcclxuICAgICAgICAgIGNvbnN0IG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQgPSBlIGFzIE1vdXNlRXZlbnRcclxuICAgICAgICAgIGlmIChldmVudE9wdGlvbnMuYnV0dG9uID09PSB1bmRlZmluZWQgfHwgKG1vdXNlRXZlbnQuYnV0dG9ucyA+IDAgJiYgbW91c2VFdmVudC5idXR0b24gPT09IGV2ZW50T3B0aW9ucy5idXR0b24pKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudE9wdGlvbnMucHJldmVudCkge1xyXG4gICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudE9wdGlvbnMuc3RvcCkge1xyXG4gICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KGV2ZW50LCBnZXRFdmVudChlKSlcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gZXZlbnRPcHRpb25zLnJlc3VsdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGtleSBpbiBvbikge1xyXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob25ba2V5XSkpIHtcclxuICAgICAgICAgICAgKG9uW2tleV0gYXMgTW91c2VIYW5kbGVyW10pLnB1c2goaGFuZGxlcilcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9uW2tleV0gPSBbb25ba2V5XSwgaGFuZGxlcl0gYXMgTW91c2VIYW5kbGVyW11cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb25ba2V5XSA9IGhhbmRsZXJcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBvblxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuIl19