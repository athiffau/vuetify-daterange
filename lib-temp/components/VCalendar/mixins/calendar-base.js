// Mixins
import mixins from '../../../util/mixins';
import Themeable from '../../../mixins/themeable';
import Colorable from '../../../mixins/colorable';
import Times from './times';
import Mouse from './mouse';
// Util
import props from '../util/props';
import { parseTimestamp, copyTimestamp, getWeekdaySkips, findWeekday, prevDay, updateWeekday, updateFormatted, updateRelative, daysInMonth, createDayList, createNativeLocaleFormatter, DAY_MIN } from '../util/timestamp';
/* @vue/component */
export default mixins(Colorable, Themeable, Times, Mouse).extend({
    name: 'calendar-base',
    props: props.base,
    computed: {
        weekdaySkips() {
            return getWeekdaySkips(this.weekdays);
        },
        parsedStart() {
            return parseTimestamp(this.start);
        },
        parsedEnd() {
            return parseTimestamp(this.end);
        },
        days() {
            return createDayList(this.parsedStart, this.parsedEnd, this.times.today, this.weekdaySkips);
        },
        dayFormatter() {
            if (this.dayFormat) {
                return this.dayFormat;
            }
            const options = { timeZone: 'UTC', day: 'numeric' };
            return createNativeLocaleFormatter(this.locale, (_tms, _short) => options);
        },
        weekdayFormatter() {
            if (this.weekdayFormat) {
                return this.weekdayFormat;
            }
            const longOptions = { timeZone: 'UTC', weekday: 'long' };
            const shortOptions = { timeZone: 'UTC', weekday: 'short' };
            return createNativeLocaleFormatter(this.locale, (_tms, short) => short ? shortOptions : longOptions);
        }
    },
    methods: {
        getRelativeClasses(timestamp, outside = false) {
            return {
                'v-present': timestamp.present,
                'v-past': timestamp.past,
                'v-future': timestamp.future,
                'v-outside': outside
            };
        },
        getStartOfWeek(timestamp) {
            const start = copyTimestamp(timestamp);
            findWeekday(start, this.weekdays[0], prevDay);
            updateFormatted(start);
            updateRelative(start, this.times.today, start.hasTime);
            return start;
        },
        getEndOfWeek(timestamp) {
            const end = copyTimestamp(timestamp);
            findWeekday(end, this.weekdays[this.weekdays.length - 1]);
            updateFormatted(end);
            updateRelative(end, this.times.today, end.hasTime);
            return end;
        },
        getStartOfMonth(timestamp) {
            const start = copyTimestamp(timestamp);
            start.day = DAY_MIN;
            updateWeekday(start);
            updateFormatted(start);
            return start;
        },
        getEndOfMonth(timestamp) {
            const end = copyTimestamp(timestamp);
            end.day = daysInMonth(end.year, end.month);
            updateWeekday(end);
            updateFormatted(end);
            return end;
        }
    }
});
//# sourceMappingURL=data:application/json;base64,