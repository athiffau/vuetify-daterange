{"version":3,"sources":["../../src/mixins/stackable.ts"],"names":[],"mappings":";;;;;;;;;;AAEA;;;;;;AAQA;kBACe,cAAI,MAAJ,GAAsB,MAAtB,CAA6B;AAC1C,UAAM,WADoC;AAG1C,QAH0C,kBAGtC;AACF,eAAO;AACL,wBAAY,YADP;AAEL,0BAAc,IAFT;AAGL,0BAAc,IAHT;AAIL,4BAAgB,CAJX;AAKL,sBAAU;AALL,SAAP;AAOD,KAXyC;;AAY1C,cAAU;AACR,oBADQ,0BACI;AACV,gBAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC,OAAO,CAAP;AAEnC,gBAAM,UAAU,KAAK,YAAL,IAAqB,KAAK,KAAL,CAAW,OAAhD;AACA;AAEA,gBAAM,QAAQ,CAAC,KAAK,QAAN,GACV,wBAAU,OAAV,CADU,GAEV,KAAK,YAAL,CAAkB,KAAK,YAAL,IAAqB,CAAC,OAAD,CAAvC,IAAoD,CAFxD;AAIA,gBAAI,SAAS,IAAb,EAAmB,OAAO,KAAP;AAEnB;AACA;AACA,mBAAO,SAAS,KAAT,CAAP;AACD;AAhBO,KAZgC;AA8B1C,aAAS;AACP,oBADO,0BAC8B;AAAA,gBAAvB,OAAuB,uEAAF,EAAE;;AACnC,gBAAM,OAAO,KAAK,GAAlB;AACA;AACA;AACA,gBAAM,MAAM,CAAC,KAAK,cAAN,EAAsB,wBAAU,IAAV,CAAtB,CAAZ;AACA;AACA;AACA;AACA,gBAAM,8CAAqB,SAAS,sBAAT,CAAgC,KAAK,UAArC,CAArB,EAAN;AAEA;AACA,iBAAK,IAAI,QAAQ,CAAjB,EAAoB,QAAQ,eAAe,MAA3C,EAAmD,OAAnD,EAA4D;AAC1D,oBAAI,CAAC,QAAQ,QAAR,CAAiB,eAAe,KAAf,CAAjB,CAAL,EAA8C;AAC5C,wBAAI,IAAJ,CAAS,wBAAU,eAAe,KAAf,CAAV,CAAT;AACD;AACF;AAED,mBAAO,KAAK,GAAL,aAAY,GAAZ,CAAP;AACD;AAnBM;AA9BiC,CAA7B,C","sourcesContent":["import Vue from 'vue'\r\n\r\nimport { getZIndex } from '../util/helpers'\r\n\r\ninterface options extends Vue {\r\n  $refs: {\r\n    content: Element\r\n  }\r\n}\r\n\r\n/* @vue/component */\r\nexport default Vue.extend<options>().extend({\r\n  name: 'stackable',\r\n\r\n  data () {\r\n    return {\r\n      stackClass: 'unpecified',\r\n      stackElement: null as Element | null,\r\n      stackExclude: null as Element[] | null,\r\n      stackMinZIndex: 0,\r\n      isActive: false\r\n    }\r\n  },\r\n  computed: {\r\n    activeZIndex (): number {\r\n      if (typeof window === 'undefined') return 0\r\n\r\n      const content = this.stackElement || this.$refs.content\r\n      // Return current zindex if not active\r\n\r\n      const index = !this.isActive\r\n        ? getZIndex(content)\r\n        : this.getMaxZIndex(this.stackExclude || [content]) + 2\r\n\r\n      if (index == null) return index\r\n\r\n      // Return max current z-index (excluding self) + 2\r\n      // (2 to leave room for an overlay below, if needed)\r\n      return parseInt(index)\r\n    }\r\n  },\r\n  methods: {\r\n    getMaxZIndex (exclude: Element[] = []) {\r\n      const base = this.$el\r\n      // Start with lowest allowed z-index or z-index of\r\n      // base component's element, whichever is greater\r\n      const zis = [this.stackMinZIndex, getZIndex(base)]\r\n      // Convert the NodeList to an array to\r\n      // prevent an Edge bug with Symbol.iterator\r\n      // https://github.com/vuetifyjs/vuetify/issues/2146\r\n      const activeElements = [...document.getElementsByClassName(this.stackClass)]\r\n\r\n      // Get z-index for all active dialogs\r\n      for (let index = 0; index < activeElements.length; index++) {\r\n        if (!exclude.includes(activeElements[index])) {\r\n          zis.push(getZIndex(activeElements[index]))\r\n        }\r\n      }\r\n\r\n      return Math.max(...zis)\r\n    }\r\n  }\r\n})\r\n"],"sourceRoot":""}