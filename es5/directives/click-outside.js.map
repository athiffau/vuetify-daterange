{"version":3,"sources":["../../src/directives/click-outside.ts"],"names":[],"mappings":";;;;;AAYA,SAAS,gBAAT,GAAyB;AACvB,WAAO,KAAP;AACD;AAED,SAAS,SAAT,CAAoB,CAApB,EAAqC,EAArC,EAAsD,OAAtD,EAAoF;AAClF;AACA,YAAQ,IAAR,GAAe,QAAQ,IAAR,IAAgB,EAA/B;AAEA;AACA,QAAM,WAAY,QAAQ,IAAR,CAAa,gBAAb,IAAiC,gBAAnD;AAEA;AACA;AACA;AACA;AACA,QAAI,CAAC,CAAD,IAAM,SAAS,CAAT,MAAgB,KAA1B,EAAiC;AAEjC;AACA;AACA;AACA;AACA;AACA,QAAK,eAAe,CAAf,IAAoB,CAAC,EAAE,SAAxB,IACD,iBAAiB,CAAjB,IAAsB,CAAC,EAAE,WAD5B,EAEE;AAEF;AACA;AACA,QAAM,WAAW,CAAC,QAAQ,IAAR,CAAa,OAAb,IAAyB;AAAA,eAAM,EAAN;AAAA,KAA1B,GAAjB;AACA;AACA,aAAS,IAAT,CAAc,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA,KAAC,aAAa,CAAb,EAAgB,QAAhB,CAAD,IAA8B,WAAW,YAAK;AAC5C,iBAAS,CAAT,KAAe,QAAQ,KAAvB,IAAgC,QAAQ,KAAR,CAAc,CAAd,CAAhC;AACD,KAF6B,EAE3B,CAF2B,CAA9B;AAGD;AAED,SAAS,YAAT,CAAuB,CAAvB,EAAwC,QAAxC,EAA+D;AAC7D;AAD6D,QAE5C,CAF4C,GAE1B,CAF0B,CAErD,OAFqD;AAAA,QAEhC,CAFgC,GAE1B,CAF0B,CAEzC,OAFyC;AAG7D;;AAH6D;AAAA;AAAA;;AAAA;AAI7D,6BAAiB,QAAjB,8HAA2B;AAAA,gBAAhB,EAAgB;;AACzB,gBAAI,YAAY,EAAZ,EAAgB,CAAhB,EAAmB,CAAnB,CAAJ,EAA2B,OAAO,IAAP;AAC5B;AAN4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ7D,WAAO,KAAP;AACD;AAED,SAAS,WAAT,CAAsB,EAAtB,EAAuC,CAAvC,EAAkD,CAAlD,EAA2D;AACzD;AACA;AACA;AACA,QAAM,IAAI,GAAG,qBAAH,EAAV;AACA;AAEA,WAAO,KAAK,EAAE,IAAP,IAAe,KAAK,EAAE,KAAtB,IAA+B,KAAK,EAAE,GAAtC,IAA6C,KAAK,EAAE,MAA3D;AACD;kBAEc;AACb;AACA;AACA;AACA;AACA;AACA,YANa,oBAMH,EANG,EAMc,OANd,EAM4C;AACvD,YAAM,UAAU,SAAV,OAAU,CAAC,CAAD;AAAA,mBAAc,UAAU,CAAV,EAA6B,EAA7B,EAAiC,OAAjC,CAAd;AAAA,SAAhB;AACA;AACA;AACA;AACA,YAAM,MAAM,SAAS,aAAT,CAAuB,YAAvB,KACV,SAAS,IADX,CALuD,CAMvC;AAChB,YAAI,gBAAJ,CAAqB,OAArB,EAA8B,OAA9B,EAAuC,IAAvC;AACA,WAAG,aAAH,GAAmB,OAAnB;AACD,KAfY;AAiBb,UAjBa,kBAiBL,EAjBK,EAiBU;AACrB,YAAI,CAAC,GAAG,aAAR,EAAuB;AAEvB,YAAM,MAAM,SAAS,aAAT,CAAuB,YAAvB,KACV,SAAS,IADX,CAHqB,CAIL;AAChB,eAAO,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,GAAG,aAApC,EAAmD,IAAnD,CAAP;AACA,eAAO,GAAG,aAAV;AACD;AAxBY,C","sourcesContent":["import { VNodeDirective } from 'vue/types/vnode'\r\n\r\ninterface ClickOutsideBindingArgs {\r\n  closeConditional?: (e: Event) => boolean\r\n  include?: () => HTMLElement[]\r\n}\r\n\r\ninterface ClickOutsideDirective extends VNodeDirective {\r\n  value?: (e: Event) => void\r\n  args?: ClickOutsideBindingArgs\r\n}\r\n\r\nfunction closeConditional () {\r\n  return false\r\n}\r\n\r\nfunction directive (e: PointerEvent, el: HTMLElement, binding: ClickOutsideDirective): void {\r\n  // Args may not always be supplied\r\n  binding.args = binding.args || {}\r\n\r\n  // If no closeConditional was supplied assign a default\r\n  const isActive = (binding.args.closeConditional || closeConditional)\r\n\r\n  // The include element callbacks below can be expensive\r\n  // so we should avoid calling them when we're not active.\r\n  // Explicitly check for false to allow fallback compatibility\r\n  // with non-toggleable components\r\n  if (!e || isActive(e) === false) return\r\n\r\n  // If click was triggered programmaticaly (domEl.click()) then\r\n  // it shouldn't be treated as click-outside\r\n  // Chrome/Firefox support isTrusted property\r\n  // IE/Edge support pointerType property (empty if not triggered\r\n  // by pointing device)\r\n  if (('isTrusted' in e && !e.isTrusted) ||\r\n    ('pointerType' in e && !e.pointerType)\r\n  ) return\r\n\r\n  // Check if additional elements were passed to be included in check\r\n  // (click must be outside all included elements, if any)\r\n  const elements = (binding.args.include || (() => []))()\r\n  // Add the root element for the component this directive was defined on\r\n  elements.push(el)\r\n\r\n  // Check if it's a click outside our elements, and then if our callback returns true.\r\n  // Non-toggleable components should take action in their callback and return falsy.\r\n  // Toggleable can return true if it wants to deactivate.\r\n  // Note that, because we're in the capture phase, this callback will occure before\r\n  // the bubbling click event on any outside elements.\r\n  !clickedInEls(e, elements) && setTimeout(() => {\r\n    isActive(e) && binding.value && binding.value(e)\r\n  }, 0)\r\n}\r\n\r\nfunction clickedInEls (e: PointerEvent, elements: HTMLElement[]): boolean {\r\n  // Get position of click\r\n  const { clientX: x, clientY: y } = e\r\n  // Loop over all included elements to see if click was in any of them\r\n  for (const el of elements) {\r\n    if (clickedInEl(el, x, y)) return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nfunction clickedInEl (el: HTMLElement, x: number, y: number): boolean {\r\n  // Get bounding rect for element\r\n  // (we're in capturing event and we want to check for multiple elements,\r\n  //  so can't use target.)\r\n  const b = el.getBoundingClientRect()\r\n  // Check if the click was in the element's bounding rect\r\n\r\n  return x >= b.left && x <= b.right && y >= b.top && y <= b.bottom\r\n}\r\n\r\nexport default {\r\n  // [data-app] may not be found\r\n  // if using bind, inserted makes\r\n  // sure that the root element is\r\n  // available, iOS does not support\r\n  // clicks on body\r\n  inserted (el: HTMLElement, binding: ClickOutsideDirective) {\r\n    const onClick = (e: Event) => directive(e as PointerEvent, el, binding)\r\n    // iOS does not recognize click events on document\r\n    // or body, this is the entire purpose of the v-app\r\n    // component and [data-app], stop removing this\r\n    const app = document.querySelector('[data-app]') ||\r\n      document.body // This is only for unit tests\r\n    app.addEventListener('click', onClick, true)\r\n    el._clickOutside = onClick\r\n  },\r\n\r\n  unbind (el: HTMLElement) {\r\n    if (!el._clickOutside) return\r\n\r\n    const app = document.querySelector('[data-app]') ||\r\n      document.body // This is only for unit tests\r\n    app && app.removeEventListener('click', el._clickOutside, true)\r\n    delete el._clickOutside\r\n  }\r\n}\r\n"],"sourceRoot":""}