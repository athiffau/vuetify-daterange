{"version":3,"sources":["../../../src/components/VTreeview/VTreeview.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\r\nimport '../../stylus/components/_treeview.styl'\r\n\r\n// Types\r\nimport { VNode, VNodeChildrenArrayContents } from 'vue'\r\nimport { PropValidator } from 'vue/types/options'\r\n\r\n// Components\r\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\r\n\r\n// Mixins\r\nimport Themeable from '../../mixins/themeable'\r\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\r\n\r\n// Utils\r\nimport {\r\n  arrayDiff,\r\n  deepEqual,\r\n  getObjectValueByPath\r\n} from '../../util/helpers'\r\nimport mixins from '../../util/mixins'\r\nimport { consoleWarn } from '../../util/console'\r\nimport {\r\n  filterTreeItems,\r\n  FilterTreeItemFunction,\r\n  filterTreeItem\r\n} from './util/filterTreeItems'\r\n\r\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\r\n\r\ntype NodeCache = Set<string | number>\r\ntype NodeArray = (string | number)[]\r\n\r\ntype NodeState = {\r\n  parent: number | string | null\r\n  children: (number | string)[]\r\n  vnode: VTreeviewNodeInstance | null\r\n  isActive: boolean\r\n  isSelected: boolean\r\n  isIndeterminate: boolean\r\n  isOpen: boolean\r\n  item: any\r\n}\r\n\r\nexport default mixins(\r\n  RegistrableProvide('treeview'),\r\n  Themeable\r\n  /* @vue/component */\r\n).extend({\r\n  name: 'v-treeview',\r\n\r\n  provide (): object {\r\n    return { treeview: this }\r\n  },\r\n\r\n  props: {\r\n    active: {\r\n      type: Array,\r\n      default: () => ([])\r\n    } as PropValidator<NodeArray>,\r\n    items: {\r\n      type: Array,\r\n      default: () => ([])\r\n    } as PropValidator<any[]>,\r\n    hoverable: Boolean,\r\n    multipleActive: Boolean,\r\n    open: {\r\n      type: Array,\r\n      default: () => ([])\r\n    } as PropValidator<NodeArray>,\r\n    openAll: Boolean,\r\n    returnObject: {\r\n      type: Boolean,\r\n      default: false // TODO: Should be true in next major\r\n    },\r\n    value: {\r\n      type: Array,\r\n      default: () => ([])\r\n    } as PropValidator<NodeArray>,\r\n    search: String,\r\n    filter: Function as PropValidator<FilterTreeItemFunction>,\r\n    ...VTreeviewNodeProps\r\n  },\r\n\r\n  data: () => ({\r\n    nodes: {} as Record<string | number, NodeState>,\r\n    selectedCache: new Set() as NodeCache,\r\n    activeCache: new Set() as NodeCache,\r\n    openCache: new Set() as NodeCache\r\n  }),\r\n\r\n  computed: {\r\n    excludedItems (): Set<string | number> {\r\n      const excluded = new Set<string|number>()\r\n\r\n      if (!this.search) return excluded\r\n\r\n      for (let i = 0; i < this.items.length; i++) {\r\n        filterTreeItems(\r\n          this.filter || filterTreeItem,\r\n          this.items[i],\r\n          this.search,\r\n          this.itemKey,\r\n          this.itemText,\r\n          this.itemChildren,\r\n          excluded\r\n        )\r\n      }\r\n\r\n      return excluded\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    items: {\r\n      handler () {\r\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\r\n        const newKeys = this.getKeys(this.items)\r\n        const diff = arrayDiff(newKeys, oldKeys)\r\n\r\n        // We only want to do stuff if items have changed\r\n        if (!diff.length && newKeys.length < oldKeys.length) return\r\n\r\n        // If nodes are removed we need to clear them from this.nodes\r\n        diff.forEach(k => delete this.nodes[k])\r\n\r\n        const oldSelectedCache = [...this.selectedCache]\r\n        this.selectedCache = new Set()\r\n        this.activeCache = new Set()\r\n        this.openCache = new Set()\r\n        this.buildTree(this.items)\r\n\r\n        // Only emit selected if selection has changed\r\n        // as a result of items changing. This fixes a\r\n        // potential double emit when selecting a node\r\n        // with dynamic children\r\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\r\n      },\r\n      deep: true\r\n    },\r\n    active (value: (string | number | any)[]) {\r\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\r\n    },\r\n    value (value: (string | number | any)[]) {\r\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\r\n    },\r\n    open (value: (string | number | any)[]) {\r\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\r\n    }\r\n  },\r\n\r\n  created () {\r\n    this.buildTree(this.items)\r\n    this.value.forEach(key => this.updateSelected(key, true))\r\n    this.emitSelected()\r\n    this.active.forEach(key => this.updateActive(key, true))\r\n    this.emitActive()\r\n  },\r\n\r\n  mounted () {\r\n    // Save the developer from themselves\r\n    if (this.$slots.prepend || this.$slots.append) {\r\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\r\n    }\r\n\r\n    if (this.openAll) {\r\n      this.updateAll(true)\r\n    } else {\r\n      this.open.forEach(key => this.updateOpen(key, true))\r\n      this.emitOpen()\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    /** @public */\r\n    updateAll (value: boolean) {\r\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\r\n      this.emitOpen()\r\n    },\r\n    getKeys (items: any[], keys: any[] = []) {\r\n      for (let i = 0; i < items.length; i++) {\r\n        const key = getObjectValueByPath(items[i], this.itemKey)\r\n        keys.push(key)\r\n        const children = getObjectValueByPath(items[i], this.itemChildren)\r\n        if (children) {\r\n          keys.push(...this.getKeys(children))\r\n        }\r\n      }\r\n\r\n      return keys\r\n    },\r\n    buildTree (items: any[], parent: (string | number | null) = null) {\r\n      for (let i = 0; i < items.length; i++) {\r\n        const item = items[i]\r\n        const key = getObjectValueByPath(item, this.itemKey)\r\n        const children = getObjectValueByPath(item, this.itemChildren, [])\r\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\r\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null\r\n        } as NodeState\r\n\r\n        const node: any = {\r\n          vnode: oldNode.vnode,\r\n          parent,\r\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\r\n          item\r\n        }\r\n\r\n        this.buildTree(children, key)\r\n\r\n        // This fixed bug with dynamic children resetting selected parent state\r\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\r\n          node.isSelected = this.nodes[parent].isSelected\r\n          node.isIndeterminate = this.nodes[parent].isIndeterminate\r\n        } else {\r\n          node.isSelected = oldNode.isSelected\r\n          node.isIndeterminate = oldNode.isIndeterminate\r\n        }\r\n\r\n        node.isActive = oldNode.isActive\r\n        node.isOpen = oldNode.isOpen\r\n\r\n        this.nodes[key] = !children.length ? node : this.calculateState(node, this.nodes)\r\n\r\n        // Don't forget to rebuild cache\r\n        if (this.nodes[key].isSelected) this.selectedCache.add(key)\r\n        if (this.nodes[key].isActive) this.activeCache.add(key)\r\n        if (this.nodes[key].isOpen) this.openCache.add(key)\r\n\r\n        this.updateVnodeState(key)\r\n      }\r\n    },\r\n    calculateState (node: NodeState, state: Record<string | number, NodeState>) {\r\n      const counts = node.children.reduce((counts: number[], child: string | number) => {\r\n        counts[0] += +Boolean(state[child].isSelected)\r\n        counts[1] += +Boolean(state[child].isIndeterminate)\r\n        return counts\r\n      }, [0, 0])\r\n\r\n      node.isSelected = !!node.children.length && counts[0] === node.children.length\r\n      node.isIndeterminate = !node.isSelected && (counts[0] > 0 || counts[1] > 0)\r\n\r\n      return node\r\n    },\r\n    emitOpen () {\r\n      this.emitNodeCache('update:open', this.openCache)\r\n    },\r\n    emitSelected () {\r\n      this.emitNodeCache('input', this.selectedCache)\r\n    },\r\n    emitActive () {\r\n      this.emitNodeCache('update:active', this.activeCache)\r\n    },\r\n    emitNodeCache (event: string, cache: NodeCache) {\r\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\r\n    },\r\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\r\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\r\n      const old = [...cache]\r\n      if (deepEqual(old, value)) return\r\n\r\n      old.forEach(key => updateFn(key, false))\r\n      value.forEach(key => updateFn(key, true))\r\n\r\n      emitFn()\r\n    },\r\n    getDescendants (key: string | number, descendants: NodeArray = []) {\r\n      const children = this.nodes[key].children\r\n\r\n      descendants.push(...children)\r\n\r\n      for (let i = 0; i < children.length; i++) {\r\n        descendants = this.getDescendants(children[i], descendants)\r\n      }\r\n\r\n      return descendants\r\n    },\r\n    getParents (key: string | number) {\r\n      let parent = this.nodes[key].parent\r\n\r\n      const parents = []\r\n      while (parent !== null) {\r\n        parents.push(parent)\r\n        parent = this.nodes[parent].parent\r\n      }\r\n\r\n      return parents\r\n    },\r\n    register (node: VTreeviewNodeInstance) {\r\n      const key = getObjectValueByPath(node.item, this.itemKey)\r\n      this.nodes[key].vnode = node\r\n\r\n      this.updateVnodeState(key)\r\n    },\r\n    unregister (node: VTreeviewNodeInstance) {\r\n      const key = getObjectValueByPath(node.item, this.itemKey)\r\n      if (this.nodes[key]) this.nodes[key].vnode = null\r\n    },\r\n    updateActive (key: string | number, isActive: boolean) {\r\n      if (!this.nodes.hasOwnProperty(key)) return\r\n\r\n      if (!this.multipleActive) {\r\n        this.activeCache.forEach(active => {\r\n          this.nodes[active].isActive = false\r\n          this.updateVnodeState(active)\r\n          this.activeCache.delete(active)\r\n        })\r\n      }\r\n\r\n      const node = this.nodes[key]\r\n      if (!node) return\r\n\r\n      if (isActive) this.activeCache.add(key)\r\n      else this.activeCache.delete(key)\r\n\r\n      node.isActive = isActive\r\n\r\n      this.updateVnodeState(key)\r\n    },\r\n    updateSelected (key: string | number, isSelected: boolean) {\r\n      if (!this.nodes.hasOwnProperty(key)) return\r\n\r\n      const changed = new Map()\r\n\r\n      const descendants = [key, ...this.getDescendants(key)]\r\n      descendants.forEach(descendant => {\r\n        this.nodes[descendant].isSelected = isSelected\r\n        this.nodes[descendant].isIndeterminate = false\r\n        changed.set(descendant, isSelected)\r\n      })\r\n\r\n      const parents = this.getParents(key)\r\n      parents.forEach(parent => {\r\n        this.nodes[parent] = this.calculateState(this.nodes[parent], this.nodes)\r\n        changed.set(parent, this.nodes[parent].isSelected)\r\n      })\r\n\r\n      const all = [key, ...descendants, ...parents]\r\n      all.forEach(this.updateVnodeState)\r\n\r\n      for (const [key, value] of changed.entries()) {\r\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\r\n      }\r\n    },\r\n    updateOpen (key: string | number, isOpen: boolean) {\r\n      if (!this.nodes.hasOwnProperty(key)) return\r\n\r\n      const node = this.nodes[key]\r\n      const children = getObjectValueByPath(node.item, this.itemChildren)\r\n\r\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\r\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\r\n      } else if (children && children.length) {\r\n        node.isOpen = isOpen\r\n\r\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\r\n\r\n        this.updateVnodeState(key)\r\n      }\r\n    },\r\n    updateVnodeState (key: string | number) {\r\n      const node = this.nodes[key]\r\n\r\n      if (node && node.vnode) {\r\n        node.vnode.isSelected = node.isSelected\r\n        node.vnode.isIndeterminate = node.isIndeterminate\r\n        node.vnode.isActive = node.isActive\r\n        node.vnode.isOpen = node.isOpen\r\n      }\r\n    },\r\n    isExcluded (key: string | number) {\r\n      return !!this.search && this.excludedItems.has(key)\r\n    }\r\n  },\r\n\r\n  render (h): VNode {\r\n    const children: VNodeChildrenArrayContents = this.items.length\r\n      ? this.items.map(VTreeviewNode.options.methods.genChild.bind(this))\r\n      /* istanbul ignore next */\r\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\r\n\r\n    return h('div', {\r\n      staticClass: 'v-treeview',\r\n      class: {\r\n        'v-treeview--hoverable': this.hoverable,\r\n        ...this.themeClasses\r\n      }\r\n    }, children)\r\n  }\r\n})\r\n"],"sourceRoot":""}