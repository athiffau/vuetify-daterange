{"version":3,"sources":["../../../src/components/VSparkline/VSparkline.ts"],"names":[],"mappings":"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","sourcesContent":["// Mixins\r\nimport Colorable from '../../mixins/colorable'\r\n\r\n// Utilities\r\nimport mixins, { ExtractVue } from '../../util/mixins'\r\nimport { genPoints } from './helpers/core'\r\nimport { genPath } from './helpers/path'\r\n\r\n// Types\r\nimport Vue, { VNode } from 'vue'\r\nimport { Prop, PropValidator } from 'vue/types/options'\r\n\r\nexport type SparklineItem = number | { value: number }\r\n\r\nexport type SparklineText = {\r\n  x: number\r\n  value: string\r\n}\r\n\r\nexport interface Boundary {\r\n  minX: number\r\n  minY: number\r\n  maxX: number\r\n  maxY: number\r\n}\r\n\r\nexport interface Point {\r\n  x: number\r\n  y: number\r\n  value: number\r\n}\r\n\r\nexport interface BarText {\r\n  points: Point[]\r\n  boundary: Boundary\r\n  offsetX: number\r\n}\r\n\r\ninterface options extends Vue {\r\n  $refs: {\r\n    path: SVGPathElement\r\n  }\r\n}\r\n\r\nexport default mixins<options &\r\n/* eslint-disable indent */\r\n  ExtractVue<[\r\n    typeof Colorable\r\n  ]>\r\n/* eslint-enable indent */\r\n>(\r\n  Colorable\r\n).extend({\r\n  name: 'VSparkline',\r\n\r\n  props: {\r\n    autoDraw: Boolean,\r\n    autoDrawDuration: {\r\n      type: Number,\r\n      default: 2000\r\n    },\r\n    autoDrawEasing: {\r\n      type: String,\r\n      default: 'ease'\r\n    },\r\n    autoLineWidth: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    color: {\r\n      type: String,\r\n      default: 'primary'\r\n    },\r\n    fill: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    gradient: {\r\n      type: Array as Prop<string[]>,\r\n      default: () => ([])\r\n    },\r\n    gradientDirection: {\r\n      type: String as Prop<'top' | 'bottom' | 'left' | 'right'>,\r\n      validator: (val: string) => ['top', 'bottom', 'left', 'right'].includes(val),\r\n      default: 'top'\r\n    },\r\n    height: {\r\n      type: [String, Number],\r\n      default: 75\r\n    },\r\n    labels: {\r\n      type: Array as Prop<SparklineItem[]>,\r\n      default: () => ([])\r\n    },\r\n    lineWidth: {\r\n      type: [String, Number],\r\n      default: 4\r\n    },\r\n    padding: {\r\n      type: [String, Number],\r\n      default: 8\r\n    },\r\n    smooth: {\r\n      type: [Boolean, Number, String],\r\n      default: false\r\n    },\r\n    showLabels: Boolean,\r\n    type: {\r\n      type: String,\r\n      default: 'trend',\r\n      validator: (val: string) => ['trend', 'bar'].includes(val)\r\n    } as PropValidator<'trend' | 'bar'>,\r\n    value: {\r\n      type: Array as Prop<SparklineItem[]>,\r\n      default: () => ([])\r\n    },\r\n    width: {\r\n      type: [Number, String],\r\n      default: 300\r\n    },\r\n    labelSize: {\r\n      type: [Number, String],\r\n      default: 7\r\n    }\r\n  },\r\n\r\n  data: () => ({\r\n    lastLength: 0\r\n  }),\r\n\r\n  computed: {\r\n    parsedPadding (): number {\r\n      return Number(this.padding)\r\n    },\r\n    parsedWidth (): number {\r\n      return Number(this.width)\r\n    },\r\n    totalBars (): number {\r\n      return this.value.length\r\n    },\r\n    _lineWidth (): number {\r\n      if (this.autoLineWidth && this.type !== 'trend') {\r\n        const totalPadding = this.parsedPadding * (this.totalBars + 1)\r\n        return (this.parsedWidth - totalPadding) / this.totalBars\r\n      } else {\r\n        return Number(this.lineWidth) || 4\r\n      }\r\n    },\r\n    boundary (): Boundary {\r\n      const height = Number(this.height)\r\n\r\n      return {\r\n        minX: this.parsedPadding,\r\n        minY: this.parsedPadding,\r\n        maxX: this.parsedWidth - this.parsedPadding,\r\n        maxY: height - this.parsedPadding\r\n      }\r\n    },\r\n    hasLabels (): boolean {\r\n      return Boolean(\r\n        this.showLabels ||\r\n        this.labels.length > 0 ||\r\n        this.$scopedSlots.label\r\n      )\r\n    },\r\n    parsedLabels (): SparklineText[] {\r\n      const labels = []\r\n      const points = this.points\r\n      const len = points.length\r\n\r\n      for (let i = 0; labels.length < len; i++) {\r\n        const item = points[i]\r\n        let value = this.labels[i]\r\n\r\n        if (!value) {\r\n          value = item === Object(item)\r\n            ? item.value\r\n            : item\r\n        }\r\n\r\n        labels.push({\r\n          ...item,\r\n          value: String(value)\r\n        })\r\n      }\r\n\r\n      return labels\r\n    },\r\n    points (): Point[] {\r\n      return genPoints(this.value.slice(), this.boundary, this.type)\r\n    },\r\n    textY (): number {\r\n      return this.boundary.maxY + 6\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    value: {\r\n      immediate: true,\r\n      handler () {\r\n        this.$nextTick(() => {\r\n          if (!this.autoDraw || this.type === 'bar') return\r\n\r\n          const path = this.$refs.path\r\n          const length = path.getTotalLength()\r\n\r\n          if (!this.fill) {\r\n            path.style.transition = 'none'\r\n            path.style.strokeDasharray = length + ' ' + length\r\n            path.style.strokeDashoffset = Math.abs(length - (this.lastLength || 0)).toString()\r\n            path.getBoundingClientRect()\r\n            path.style.transition = `stroke-dashoffset ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\r\n            path.style.strokeDashoffset = '0'\r\n          } else {\r\n            path.style.transformOrigin = 'bottom center'\r\n            path.style.transition = 'none'\r\n            path.style.transform = `scaleY(0)`\r\n            path.getBoundingClientRect()\r\n            path.style.transition = `transform ${this.autoDrawDuration}ms ${this.autoDrawEasing}`\r\n            path.style.transform = `scaleY(1)`\r\n          }\r\n          this.lastLength = length\r\n        })\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    genGradient () {\r\n      const gradientDirection = this.gradientDirection\r\n      const gradient = this.gradient.slice()\r\n\r\n      // Pushes empty string to force\r\n      // a fallback to currentColor\r\n      if (!gradient.length) gradient.push('')\r\n\r\n      const len = Math.max(gradient.length - 1, 1)\r\n      const stops = gradient.reverse().map((color, index) =>\r\n        this.$createElement('stop', {\r\n          attrs: {\r\n            offset: index / len,\r\n            'stop-color': color || this.color || 'currentColor'\r\n          }\r\n        })\r\n      )\r\n\r\n      return this.$createElement('defs', [\r\n        this.$createElement('linearGradient', {\r\n          attrs: {\r\n            id: this._uid,\r\n            x1: +(gradientDirection === 'left'),\r\n            y1: +(gradientDirection === 'top'),\r\n            x2: +(gradientDirection === 'right'),\r\n            y2: +(gradientDirection === 'bottom')\r\n          }\r\n        }, stops)\r\n      ])\r\n    },\r\n    genG (children: VNode[]) {\r\n      return this.$createElement('g', {\r\n        style: {\r\n          fontSize: '8',\r\n          textAnchor: 'middle',\r\n          dominantBaseline: 'mathematical',\r\n          fill: this.color || 'currentColor'\r\n        }\r\n      }, children)\r\n    },\r\n    genLabels () {\r\n      if (!this.hasLabels) return undefined\r\n\r\n      return this.genG(this.parsedLabels.map(this.genText))\r\n    },\r\n    genPath () {\r\n      const radius = this.smooth === true ? 8 : Number(this.smooth)\r\n\r\n      return this.$createElement('path', {\r\n        attrs: {\r\n          id: this._uid,\r\n          d: genPath(this.points.slice(), radius, this.fill, Number(this.height)),\r\n          fill: this.fill ? `url(#${this._uid})` : 'none',\r\n          stroke: this.fill ? 'none' : `url(#${this._uid})`\r\n        },\r\n        ref: 'path'\r\n      })\r\n    },\r\n    genText (item: SparklineText, index: number) {\r\n      const children = this.$scopedSlots.label\r\n        ? this.$scopedSlots.label({ index, value: item.value })\r\n        : item.value\r\n\r\n      return this.$createElement('text', {\r\n        attrs: {\r\n          x: item.x,\r\n          y: this.textY\r\n        }\r\n      }, [children])\r\n    },\r\n    genBar () {\r\n      if (!this.value || this.totalBars < 2) return undefined as never\r\n      const { width, height, parsedPadding, _lineWidth } = this\r\n      const viewWidth = width || this.totalBars * parsedPadding * 2\r\n      const viewHeight = height || 75\r\n      const boundary: Boundary = {\r\n        minX: parsedPadding,\r\n        minY: parsedPadding,\r\n        maxX: Number(viewWidth) - parsedPadding,\r\n        maxY: Number(viewHeight) - parsedPadding\r\n      }\r\n      const props = {\r\n        ...this.$props\r\n      }\r\n\r\n      props.points = genPoints(this.value, boundary, this.type)\r\n\r\n      const totalWidth = boundary.maxX / (props.points.length - 1)\r\n\r\n      props.boundary = boundary\r\n      props.lineWidth = _lineWidth || (totalWidth - Number(parsedPadding || 5))\r\n      props.offsetX = 0\r\n      if (!this.autoLineWidth) {\r\n        props.offsetX = ((boundary.maxX / this.totalBars) / 2) - boundary.minX\r\n      }\r\n\r\n      return this.$createElement('svg', {\r\n        attrs: {\r\n          width: '100%',\r\n          height: '25%',\r\n          viewBox: `0 0 ${viewWidth} ${viewHeight}`\r\n        }\r\n      }, [\r\n        this.genGradient(),\r\n        this.genClipPath(props.offsetX, props.lineWidth, 'sparkline-bar-' + this._uid),\r\n        this.hasLabels ? this.genBarLabels(props as BarText) : undefined as never,\r\n        this.$createElement('g', {\r\n          attrs: {\r\n            transform: `scale(1,-1) translate(0,-${boundary.maxY})`,\r\n            'clip-path': `url(#sparkline-bar-${this._uid}-clip)`,\r\n            fill: `url(#${this._uid})`\r\n          }\r\n        }, [\r\n          this.$createElement('rect', {\r\n            attrs: {\r\n              x: 0,\r\n              y: 0,\r\n              width: viewWidth,\r\n              height: viewHeight\r\n            }\r\n          })\r\n        ])\r\n      ])\r\n    },\r\n    genClipPath (offsetX: number, lineWidth: number, id: string) {\r\n      const { maxY } = this.boundary\r\n      const rounding = typeof this.smooth === 'number'\r\n        ? this.smooth\r\n        : this.smooth ? 2 : 0\r\n\r\n      return this.$createElement('clipPath', {\r\n        attrs: {\r\n          id: `${id}-clip`\r\n        }\r\n      }, this.points.map(item => {\r\n        return this.$createElement('rect', {\r\n          attrs: {\r\n            x: item.x + offsetX,\r\n            y: 0,\r\n            width: lineWidth,\r\n            height: Math.max(maxY - item.y, 0),\r\n            rx: rounding,\r\n            ry: rounding\r\n          }\r\n        }, [\r\n          this.autoDraw ? this.$createElement('animate', {\r\n            attrs: {\r\n              attributeName: 'height',\r\n              from: 0,\r\n              to: maxY - item.y,\r\n              dur: `${this.autoDrawDuration}ms`,\r\n              fill: 'freeze'\r\n            }\r\n          }) : undefined as never\r\n        ])\r\n      }))\r\n    },\r\n    genBarLabels (props: BarText): VNode {\r\n      const offsetX = props.offsetX || 0\r\n\r\n      const children = props.points.map(item => (\r\n        this.$createElement('text', {\r\n          attrs: {\r\n            x: item.x + offsetX + this._lineWidth / 2,\r\n            y: props.boundary.maxY + (Number(this.labelSize) || 7),\r\n            'font-size': Number(this.labelSize) || 7\r\n          }\r\n        }, item.value.toString())\r\n      ))\r\n\r\n      return this.genG(children)\r\n    },\r\n    genTrend () {\r\n      return this.$createElement('svg', this.setTextColor(this.color, {\r\n        attrs: {\r\n          'stroke-width': this._lineWidth || 1,\r\n          width: '100%',\r\n          height: '25%',\r\n          viewBox: `0 0 ${this.width} ${this.height}`\r\n        }\r\n      }), [\r\n        this.genGradient(),\r\n        this.genLabels(),\r\n        this.genPath()\r\n      ])\r\n    }\r\n  },\r\n\r\n  render (h): VNode {\r\n    if (this.totalBars < 2) return undefined as never\r\n\r\n    return this.type === 'trend'\r\n      ? this.genTrend()\r\n      : this.genBar()\r\n  }\r\n})\r\n"],"sourceRoot":""}