{"version":3,"sources":["../../../../src/components/VSparkline/helpers/path.ts"],"names":[],"mappings":";;;;;QAMgB,O,GAAA,O;;;;AAHhB;;;AAGM,SAAU,OAAV,CAAmB,MAAnB,EAAoC,MAApC,EAA6E;AAAA,QAAzB,IAAyB,uEAAlB,KAAkB;AAAA,QAAX,MAAW,uEAAF,EAAE;;AACjF,QAAM,QAAQ,OAAO,KAAP,EAAd;AACA,QAAM,MAAM,OAAO,OAAO,MAAP,GAAgB,CAAvB,CAAZ;AAEA,WACE,CAAC,aAAW,MAAM,CAAjB,SAAsB,MAAtB,UAAiC,MAAM,CAAvC,SAA4C,MAAM,CAAlD,SAA4D,MAAM,CAAlE,SAAuE,MAAM,CAA9E,IACA,OACG,GADH,CACO,UAAC,KAAD,EAAQ,KAAR,EAAiB;AACpB,YAAM,OAAO,OAAO,QAAQ,CAAf,CAAb;AACA,YAAM,OAAO,OAAO,QAAQ,CAAf,KAAqB,KAAlC;AACA,YAAM,cAAc,QAAQ,0BAAe,IAAf,EAAqB,KAArB,EAA4B,IAA5B,CAA5B;AAEA,YAAI,CAAC,IAAD,IAAS,WAAb,EAA0B;AACxB,yBAAW,MAAM,CAAjB,SAAsB,MAAM,CAA5B;AACD;AAED,YAAM,YAAY,KAAK,GAAL,CAChB,uBAAY,IAAZ,EAAkB,KAAlB,CADgB,EAEhB,uBAAY,IAAZ,EAAkB,KAAlB,CAFgB,CAAlB;AAIA,YAAM,sBAAsB,YAAY,CAAZ,GAAgB,MAA5C;AACA,YAAM,iBAAiB,sBAAsB,YAAY,CAAlC,GAAsC,MAA7D;AAEA,YAAM,SAAS,kBAAO,IAAP,EAAa,KAAb,EAAoB,cAApB,CAAf;AACA,YAAM,QAAQ,kBAAO,IAAP,EAAa,KAAb,EAAoB,cAApB,CAAd;AAEA,qBAAW,OAAO,CAAlB,SAAuB,OAAO,CAA9B,SAAmC,MAAM,CAAzC,SAA8C,MAAM,CAApD,SAAyD,MAAM,CAA/D,SAAoE,MAAM,CAA1E;AACD,KArBH,EAsBG,IAtBH,CAsBQ,EAtBR,CADA,IAwBC,aAAW,IAAI,CAAf,SAAoB,MAApB,UAAiC,EAxBlC,CADF;AA0BD","sourcesContent":["import { Point } from '../VSparkline'\r\nimport { checkCollinear, getDistance, moveTo } from './math'\r\n\r\n/**\r\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\r\n */\r\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\r\n  const start = points.shift()!\r\n  const end = points[points.length - 1]\r\n\r\n  return (\r\n    (fill ? `M${start.x} ${height} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\r\n    points\r\n      .map((point, index) => {\r\n        const next = points[index + 1]\r\n        const prev = points[index - 1] || start\r\n        const isCollinear = next && checkCollinear(next, point, prev)\r\n\r\n        if (!next || isCollinear) {\r\n          return `L${point.x} ${point.y}`\r\n        }\r\n\r\n        const threshold = Math.min(\r\n          getDistance(prev, point),\r\n          getDistance(next, point)\r\n        )\r\n        const isTooCloseForRadius = threshold / 2 < radius\r\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\r\n\r\n        const before = moveTo(prev, point, radiusForPoint)\r\n        const after = moveTo(next, point, radiusForPoint)\r\n\r\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\r\n      })\r\n      .join('') +\r\n    (fill ? `L${end.x} ${height} Z` : ''))\r\n}\r\n"],"sourceRoot":""}