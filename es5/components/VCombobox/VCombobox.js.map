{"version":3,"sources":["../../../src/components/VCombobox/VCombobox.js"],"names":[],"mappings":"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","sourcesContent":["// Styles\r\nimport '../../stylus/components/_autocompletes.styl'\r\n\r\n// Extensions\r\nimport VSelect from '../VSelect/VSelect'\r\nimport VAutocomplete from '../VAutocomplete/VAutocomplete'\r\n\r\n// Utils\r\nimport { keyCodes } from '../../util/helpers'\r\n\r\n/* @vue/component */\r\nexport default {\r\n  name: 'v-combobox',\r\n\r\n  extends: VAutocomplete,\r\n\r\n  props: {\r\n    delimiters: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    returnObject: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n\r\n  data: () => ({\r\n    editingIndex: -1\r\n  }),\r\n\r\n  computed: {\r\n    counterValue () {\r\n      return this.multiple\r\n        ? this.selectedItems.length\r\n        : (this.internalSearch || '').toString().length\r\n    },\r\n    hasSlot () {\r\n      return VSelect.options.computed.hasSlot.call(this) || this.multiple\r\n    },\r\n    isAnyValueAllowed () {\r\n      return true\r\n    },\r\n    menuCanShow () {\r\n      if (!this.isFocused) return false\r\n\r\n      return this.hasDisplayedItems ||\r\n        (!!this.$slots['no-data'] && !this.hideNoData)\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    onFilteredItemsChanged () {\r\n      // nop\r\n    },\r\n    onInternalSearchChanged (val) {\r\n      if (\r\n        val &&\r\n        this.multiple &&\r\n        this.delimiters.length\r\n      ) {\r\n        const delimiter = this.delimiters.find(d => val.endsWith(d))\r\n        if (delimiter != null) {\r\n          this.internalSearch = val.slice(0, val.length - delimiter.length)\r\n          this.updateTags()\r\n        }\r\n      }\r\n\r\n      this.updateMenuDimensions()\r\n    },\r\n    genChipSelection (item, index) {\r\n      const chip = VSelect.options.methods.genChipSelection.call(this, item, index)\r\n\r\n      // Allow user to update an existing value\r\n      if (this.multiple) {\r\n        chip.componentOptions.listeners.dblclick = () => {\r\n          this.editingIndex = index\r\n          this.internalSearch = this.getText(item)\r\n          this.selectedIndex = -1\r\n        }\r\n      }\r\n\r\n      return chip\r\n    },\r\n    onChipInput (item) {\r\n      VSelect.options.methods.onChipInput.call(this, item)\r\n\r\n      this.editingIndex = -1\r\n    },\r\n    // Requires a manual definition\r\n    // to overwrite removal in v-autocomplete\r\n    onEnterDown (e) {\r\n      e.preventDefault()\r\n\r\n      VSelect.options.methods.onEnterDown.call(this)\r\n\r\n      // If has menu index, let v-select-list handle\r\n      if (this.getMenuIndex() > -1) return\r\n\r\n      this.updateSelf()\r\n    },\r\n    onKeyDown (e) {\r\n      const keyCode = e.keyCode\r\n\r\n      VSelect.options.methods.onKeyDown.call(this, e)\r\n\r\n      // If user is at selection index of 0\r\n      // create a new tag\r\n      if (this.multiple &&\r\n        keyCode === keyCodes.left &&\r\n        this.$refs.input.selectionStart === 0\r\n      ) {\r\n        this.updateSelf()\r\n      }\r\n\r\n      // The ordering is important here\r\n      // allows new value to be updated\r\n      // and then moves the index to the\r\n      // proper location\r\n      this.changeSelectedIndex(keyCode)\r\n    },\r\n    onTabDown (e) {\r\n      // When adding tags, if searching and\r\n      // there is not a filtered options,\r\n      // add the value to the tags list\r\n      if (this.multiple &&\r\n        this.internalSearch &&\r\n        this.getMenuIndex() === -1\r\n      ) {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n\r\n        return this.updateTags()\r\n      }\r\n\r\n      VAutocomplete.options.methods.onTabDown.call(this, e)\r\n    },\r\n    selectItem (item) {\r\n      // Currently only supports items:<string[]>\r\n      if (this.editingIndex > -1) {\r\n        this.updateEditing()\r\n      } else {\r\n        VSelect.options.methods.selectItem.call(this, item)\r\n      }\r\n    },\r\n    setSelectedItems () {\r\n      if (this.internalValue == null ||\r\n        this.internalValue === ''\r\n      ) {\r\n        this.selectedItems = []\r\n      } else {\r\n        this.selectedItems = this.multiple ? this.internalValue : [this.internalValue]\r\n      }\r\n    },\r\n    setValue (value = this.internalSearch) {\r\n      VSelect.options.methods.setValue.call(this, value)\r\n    },\r\n    updateEditing () {\r\n      const value = this.internalValue.slice()\r\n      value[this.editingIndex] = this.internalSearch\r\n\r\n      this.setValue(value)\r\n\r\n      this.editingIndex = -1\r\n    },\r\n    updateCombobox () {\r\n      const isUsingSlot = Boolean(this.$scopedSlots.selection) || this.hasChips\r\n\r\n      // If search is not dirty and is\r\n      // using slot, do nothing\r\n      if (isUsingSlot && !this.searchIsDirty) return\r\n\r\n      // The internal search is not matching\r\n      // the internal value, update the input\r\n      if (this.internalSearch !== this.getText(this.internalValue)) this.setValue()\r\n\r\n      // Reset search if using slot\r\n      // to avoid a double input\r\n      if (isUsingSlot) this.internalSearch = undefined\r\n    },\r\n    updateSelf () {\r\n      this.multiple ? this.updateTags() : this.updateCombobox()\r\n    },\r\n    updateTags () {\r\n      const menuIndex = this.getMenuIndex()\r\n\r\n      // If the user is not searching\r\n      // and no menu item is selected\r\n      // do nothing\r\n      if (menuIndex < 0 &&\r\n        !this.searchIsDirty\r\n      ) return\r\n\r\n      if (this.editingIndex > -1) {\r\n        return this.updateEditing()\r\n      }\r\n\r\n      const index = this.selectedItems.indexOf(this.internalSearch)\r\n      // If it already exists, do nothing\r\n      // this might need to change to bring\r\n      // the duplicated item to the last entered\r\n      if (index > -1) {\r\n        const internalValue = this.internalValue.slice()\r\n        internalValue.splice(index, 1)\r\n\r\n        this.setValue(internalValue)\r\n      }\r\n\r\n      // If menu index is greater than 1\r\n      // the selection is handled elsewhere\r\n      // TODO: find out where\r\n      if (menuIndex > -1) return (this.internalSearch = null)\r\n\r\n      this.selectItem(this.internalSearch)\r\n      this.internalSearch = null\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}